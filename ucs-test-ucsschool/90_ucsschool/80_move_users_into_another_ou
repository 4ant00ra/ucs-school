#!/usr/share/ucs-test/runner python
## desc: move user into another school
## roles: [domaincontroller_master, domaincontroller_slave]
## tags: [apptest, ucsschool]
## bugs: [40870]
## exposure: dangerous

from univention.testing.ucsschool import UCSTestSchool
from univention.testing.ucr import UCSTestConfigRegistry
from univention.testing import utils
from ucsschool.lib.models import User
import univention.config_registry


def main():
	if not hasattr(User, 'change_school'):
		utils.fail('ERROR: moving users to another school OU is not supported by ucs-school-lib')

	with UCSTestSchool() as env, UCSTestConfigRegistry() as ucr:
		# make sure that nonedu containers are created
		univention.config_registry.handler_set(['ucsschool/ldap/noneducational/create/objects=yes'])

		a, a_dn = env.create_ou(name_edudc=ucr.get('hostname'))
		b, b_dn = env.create_ou(name_edudc=ucr.get('hostname'))

		# TODO: create some classes, workgroups, put into one global group, add exam user
		# TODO: create classes which doesn't exists on school b
		# TODO: change school and uid at once!
		# TODO: user without classes

		base = ucr['ldap/base']
		domain_users_school = 'cn=Domain Users %s,cn=groups,ou=%s,%s' % (b, b, base)
		teacher_group = 'cn=lehrer-%s,cn=groups,ou=%s,%s' % (b, b, base)
		staff_group = 'cn=mitarbeiter-%s,cn=groups,ou=%s,%s' % (b, b, base)
		students_group = 'cn=schueler-%s,cn=groups,ou=%s,%s' % (b, b, base)

		users = [
			(env.create_user(a), 'schueler', [students_group, domain_users_school]),
			(env.create_user(a, is_teacher=True), 'lehrer', [domain_users_school, teacher_group]),
			(env.create_user(a, is_staff=True), 'mitarbeiter', [domain_users_school, staff_group]),
			(env.create_user(a, is_teacher=True, is_staff=True), 'lehrer', [domain_users_school, teacher_group, staff_group]),
		]
		lo = env.open_ldap_connection()
		for (user, dn,), roleshare_path, groups in users:
			print '################################'
			print '#### moving user at', dn, 'to', b
			print '################################'
			user = User.from_dn(dn, a, lo)
			attrs = {
				'homeDirectory': ['/home/%s/%s/%s' % (b, roleshare_path, user.name)],
				'ucsschoolSchool': [b],
				'departmentNumber': [b],
				# TODO: add sambaHomeDrive sambaHomePath sambaLogonScript sambaProfilePath
			}
			oldinfo = user.get_udm_object(lo).info
			if oldinfo.get('departmentNumber') != a:
				attrs.pop('departmentNumber')
			user.change_school(b, lo)
			assert user.dn != dn
			assert b in user.dn
			utils.wait_for_replication()
			try:
				utils.verify_ldap_object(user.dn, expected_attr=attrs, strict=True, should_exist=True)
			except utils.LDAPObjectValueMissing:
				info = user.get_udm_object(lo).info
				print 'FAIL1: %r;\noldinfo=%r\ninfo=%r' % (user.dn, oldinfo, info)
				print 'FAIL2: %r; attrs=%r' % (user.dn, lo.get(user.dn))
				raise

			assert set(groups) == set(user.get_udm_object(lo)['groups']), 'Moving the user failed... Expected groups %r != %r' % (groups, user.get_udm_object(lo)['groups'])


if __name__ == '__main__':
	main()
