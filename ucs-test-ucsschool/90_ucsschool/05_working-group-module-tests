#!/usr/share/ucs-test/runner python
## desc: ucs-school-workinggroup-module-check
## roles: [domaincontroller_master]
## tags: [apptest]
## exposure: safe
## packages:
##   - ucs-school-umc-groups
# overwriding print function to print in color

from univention.lib.umc_connection import UMCConnection
import sys
import univention.testing.strings as uts
import univention.testing.ucr as ucr_test
import univention.testing.ucsschool as utu
import univention.uldap as uu

# check for group and file share objects existance in ldap
def objExist(ulconnection, groupName, schoolName, basedn):
    groupdn = 'cn=' + schoolName + '-' + groupName + ',cn=schueler,cn=groups,ou='\
            + schoolName + ',' + basedn
    sharedn = 'cn=' + schoolName + '-' + groupName + ',cn=shares,ou='\
            + schoolName + ',' + basedn
    cn = 'cn=' + schoolName + '-' + groupName
    found = sorted(ulconnection.searchDn(filter = cn))
    sfound = sorted([groupdn, sharedn])
    returnValue = ( found == sfound)
    if returnValue:
        print('group ', groupName, 'and its file share object exist in ldap')
        returnValue = 1
    else:
        # Covering all logically possible cases
        if len(found) > 0:
            for i in len(found):
                if found[i] == sfound[0]:
                    print('group ', groupName, 'object exist in ldap, BUT\
                            the file share object does not')
                elif found[i] == sfound[1]:
                    print('group ', groupName, 'file share object exist in\
                            ldap, BUT the group object does not')
                else:
                    print('group ', groupName, 'AND its file share object\
                            DOES NOT exist in ldap')
        else:
            print('group ', groupName, 'AND its file share object DOES NOT\
                    exist in ldap')
        returnValue = 0
    return returnValue

# checking group attributes in ldap
def checkAttr(ulconnection, memberList, groupName,schoolName, basedn,\
        description=None):
    returnList = []
    objectdn = 'cn=' + schoolName + '-' + groupName + ',cn=schueler,cn=groups,ou='\
            + schoolName + ',' + basedn
    currentMembers = sorted(ulconnection.getAttr(objectdn, 'memberUid'))
    returnList.append(sorted(memberList) == currentMembers)
    currentDescription = ulconnection.getAttr(objectdn, 'description')[0]
    returnList.append(description == currentDescription)
    check = (returnList == [1,1])
    if check:
        print('Attributes check succeeded for group: ', groupName )
        returnValue = 1
    else:
        print('Attributes check failed for group: ', groupName )
        returnValue = 0
    return returnValue


# creating Workgroup
def createWorkgroup(connection, groupName, schoolName, description, \
        memberListdn, options):
    flavor = 'workgroup-admin'
    creationParam = [
            {
                'object':{
                    'school': schoolName,
                    'name' : groupName,
                    'description':description,
                    'members':memberListdn
                },
                'options':options
                }
            ]
    try:
        requestResult = connection.request('schoolgroups/add',creationParam ,\
                flavor)
        if requestResult:
            print('Group', groupName, 'added successfully')
            returnValue = 1
        else:
            print('Group', groupName, 'failed to be added')
            returnValue = 0
    except Exception as e:
        ex = 'The groupname is already in use as groupname or as username'
        if ex in str(e):
            print(ex)
        else:
            print("Exception: '%s' '%s' '%r'" % (str(e), type(e), e))
        returnValue = 0
    return returnValue

# Removing a Workgroup
def removeGroup(connection, groupName, schoolName, basedn, options):
    groupdn = 'cn=' + schoolName + '-' + groupName + ',cn=schueler,cn=groups,ou='\
            + schoolName + ',' + basedn
    flavor = 'workgroup-admin'
    removingParam = [{"object":[groupdn],"options":options}]
    try:
        requestResult = connection.request('schoolgroups/remove', \
                removingParam, flavor)
        if requestResult:
            print('Group', groupName, 'removed successfully')
            returnValue = 1
        else:
            print('Group', groupName, 'failed to be removed')
            returnValue = 0
    except Exception as e:
        print("Exception: '%s' '%s' '%r'" % (str(e), type(e), e))
        returnValue = 0
    return returnValue

# add members to workgroup
def addMembers(ulconnection, connection, groupName, schoolName, basedn,\
        description, memberListdn, options) :
    flavor = 'workgroup-admin'
    objectdn = 'cn=' + schoolName + '-' + groupName + ',cn=schueler,cn=groups,ou='\
            + schoolName + ',' + basedn
    currentMembers = sorted(ulconnection.getAttr(objectdn, 'uniqueMember'))
    for member in memberListdn:
        if member not in currentMembers:
            currentMembers.append(member)
        else:
            print('member', member, 'already exist in the group')
    creationParam = [
            {
                'object':{
                    '$dn$' : objectdn,
                    'school': schoolName,
                    'name' : groupName,
                    'description':description,
                    'members':currentMembers
                },
                'options':options
                }
            ]
    try:
        requestResult = connection.request('schoolgroups/put', creationParam ,\
                flavor)
        if requestResult:
            print('members', currentMembers, 'added successfully to workgroup',\
                    groupName)
            returnValue = 1
        else:
            print('members', currentMembers, 'failed to be added to workgroup',\
                    groupName)
            returnValue = 0
    except Exception as e:
        print("Exception: '%s' '%s' '%r'" % (str(e), type(e), e))
        returnValue = 0
    return returnValue

# remove members from a workgroup
def removeMembers(ulconnection, connection, groupName, schoolName, basedn,\
        description, memberListdn, options) :
    flavor = 'workgroup-admin'
    objectdn = 'cn=' + schoolName + '-' + groupName + ',cn=schueler,cn=groups,ou='\
            + schoolName + ',' + basedn
    currentMembers = sorted(ulconnection.getAttr(objectdn, 'uniqueMember'))
    for member in memberListdn:
        if member in currentMembers:
            currentMembers.remove(member)
        else:
            print('member', member, 'does not exist in the group')
    creationParam = [
            {
                'object':{
                    '$dn$' : objectdn,
                    'school': schoolName,
                    'name' : groupName,
                    'description':description,
                    'members':currentMembers
                },
                'options':options
                }
            ]
    try:
        requestResult = connection.request('schoolgroups/put',creationParam ,\
                flavor)
        if requestResult:
            print('members', currentMembers, 'removed successfully from\
                    the workgroup', groupName)
            returnValue = 1
        else:
            print('members', currentMembers, 'failed to be removed from\
                    the workgrou ', groupName)
            returnValue = 0
    except Exception as e:
        print("Exception: '%s' '%s' '%r'" % (str(e), type(e), e))
        returnValue = 0
    return returnValue

def main():
    # initinalizing
    returnList = []
    emptygroupName = uts.random_string()
    groupName = uts.random_string()
    description = uts.random_string()
    emptydescription = uts.random_string()
    memberList = []
    memberListdn = []
    # prepare connection: UMCConnection
    ucr = ucr_test.UCSTestConfigRegistry()
    ucr.load()
    host = ucr.get('hostname')
    connection = UMCConnection(host)
    basedn =ucr.get('ldap/base')
    with utu.UCSTestSchool()  as schoolenv:
        schoolName, oudn = schoolenv.create_ou(displayName='')
        tea, teadn = schoolenv.create_user(schoolName, is_teacher=True)
        memberListdn.append(teadn)
        memberList.append(tea)
        stu, studn = schoolenv.create_user(schoolName)
        memberList.append(stu)
        memberListdn.append(studn)
        print('current members are:' , memberList)
        connection.auth('Administrator' ,'univention')

        # prepare connection: uldap connection
        ulconnection = uu.getMachineConnection(ldap_master=False)

        # 1 creating empty workgroup
        returnList.append(createWorkgroup(connection, emptygroupName, schoolName,\
                emptydescription, [], None))

        # 2 creating none-empty workgroup
        returnList.append(createWorkgroup(connection, groupName, schoolName,\
                description, memberListdn, None))

        # 3 checking the created workgroup and its file share object in ldap
        returnList.append(objExist(ulconnection, groupName, schoolName, basedn))

        # 4 checking if the atrriputes for the group is correct in ldap
        returnList.append(checkAttr(ulconnection, memberList, groupName, \
                schoolName, basedn, description))

        # 5 should fail: creating a new working group with the same name
        returnList.append(createWorkgroup(connection, groupName, schoolName, \
                description, memberListdn, None))

        # 6 add members to group
        returnList.append(addMembers(ulconnection, connection, emptygroupName,\
                schoolName, basedn, emptydescription, memberListdn,None))

        # 7 remove members from a group
        membersToRemove = [memberListdn[0]]
        returnList.append(removeMembers(ulconnection, connection, groupName,\
                schoolName, basedn, description, membersToRemove,None))

        # 8 checking if the atrriputes for the emptygroup is correct in ldap
        returnList.append(checkAttr(ulconnection, memberList, emptygroupName, \
                schoolName, basedn, emptydescription))

        # 9 checking if the atrriputes for the group is correct in ldap
        returnList.append(checkAttr(ulconnection, [memberList[1]], groupName,\
                schoolName, basedn, description))

        # 10 remove the group
        returnList.append(removeGroup(connection,groupName,schoolName,\
                basedn, None))

        # 11 check if the object is removed from ldap
        returnList.append(objExist(ulconnection, groupName, schoolName, basedn))

    returnValue = (not returnList == [1,1,1,1,0,1,1,1,1,1,0])
    return returnValue

if __name__ == '__main__':
    sys.exit(main())
