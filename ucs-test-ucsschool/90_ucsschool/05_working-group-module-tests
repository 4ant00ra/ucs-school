#!/usr/share/ucs-test/runner python
## desc: ucs-school-workinggroup-module-check
## roles: [domaincontroller_master]
## tags: [apptest]
## exposure: safe
## packages:
##   - ucs-school-umc-groups

from ucsschool.lib.schoolldap import LDAP_Connection, LDAP_ConnectionError,\
        SchoolSearchBase
from univention.lib.umc_connection import UMCConnection
import sys, os, time, subprocess, re
import univention.testing.strings as uts
import univention.testing.ucr as ucr_test
import univention.testing.ucsschool as utu

# check for group and file share objects existance in ldap
def objExist(objType ,groupName, schoolName, basedn):
    if (objType == 'group'):
        cn = ',cn=schueler,cn=groups,ou='
    elif (objType == 'file share'):
        cn = ',cn=shares,ou='
    else:
        cn = ',ou='
    objectdn = 'cn=' + schoolName + '-' + groupName + cn + schoolName + ',' + \
            basedn
    cmd = ['univention-ldapsearch', '-LLL', '-b',objectdn, 'dn']
    cmdOutput = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]
    found = re.findall(r'(?<=\bdn:\s).*\n?\S',cmdOutput,re.UNICODE)
    print ('found = ', found)
    if len(found) > 0:
        if ( objectdn == found[0]):
            print ( objType, 'object exists in ldap' )
            returnValue = 1
        else:
            print ( objType, 'object does not exist in ldap' )
            returnValue = 0
    else:
        returnValue = 0
    return returnValue

# checking if the description for a group is correct -- regex
def descriptionCorrect(description, groupName, schoolName, basedn):
    cn = ',cn=schueler,cn=groups,ou='
    objectdn = 'cn=' + schoolName + '-' + groupName + cn + schoolName + ',' + \
            basedn
    cmd = ['univention-ldapsearch', '-LLL', '-b',objectdn , 'description']
    cmdOutput = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]
    found = re.findall(r'(?<=\bdescription:\s)\w+\b',cmdOutput,re.UNICODE)
    if (description == found[0]):
        print ('description matches')
        returnValue = 1
    else:
        print ('description does not match')
        returnValue = 0
    return returnValue

# checking if memberList in a created group -- regex
def memberExist(memberList, groupName, schoolName, basedn):
    cn = ',cn=schueler,cn=groups,ou='
    objectdn = 'cn=' + schoolName + '-' + groupName + cn + schoolName + ',' + \
            basedn
    cmd = ['univention-ldapsearch', '-LLL', '-b',objectdn , 'memberUid']
    cmdOutput = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]
    found = sorted(re.findall(r'(?<=\bmemberUid:\s)\w+\b',cmdOutput, \
            re.UNICODE))
    memberList = sorted(memberList)
    if(memberList == found):
        print ('Members are found in group', groupName)
        returnValue = 1
    else:
        print ('Members not found in group', groupName)
        returnValue = 0
    return returnValue

# changing the uid for a user --udm/put
def changeUid(connection, oldUid, newUid, schoolName, basedn, is_teacher):
    if is_teacher:
        cn = 'lehrer'
    else:
        cn = 'schueler'
    flavor = "users/user"
    objectdn = 'uid=' + oldUid + ',cn=' + cn + ',cn=users,ou=' + schoolName +\
            ',' + basedn
    param = [{"object":{"username":newUid,"CtxBrokenSession":"0000", \
            "CtxReconnectSession":"0000","$dn$":objectdn}, "options":None}]
    try:
        requestResult = connection.request('udm/put', param , flavor)
        if requestResult:
            print(oldUid, 'changed to', newUid, 'successfully')
            returnValue = 1
        else:
            print('changeUid faild')
            returnValue = 0
    except Exception as e:
        print("Exception: '%s' '%s' '%r'" % (str(e), type(e), e))
        returnValue = 0
    return returnValue

# creating Workgroup
def createWorkgroup(connection, groupName, schoolName, description, \
        memberListdn, options):
    flavor = 'workgroup-admin'
    creationParam = [
            {
                'object':{
                    'school': schoolName,
                    'name' : groupName,
                    'description':description,
                    'members':memberListdn
                },
                'options':options
                }
            ]
    try:
        requestResult = connection.request('schoolgroups/add', \
                        creationParam , flavor)
        if requestResult:
            print('Group', groupName, 'added successfully')
            returnValue = 1
        else:
            print('Group', groupName, 'fail to be added')
            returnValue = 0
    except Exception as e:
        print("Exception: '%s' '%s' '%r'" % (str(e), type(e), e))
        returnValue = 0
    return returnValue

# Removing a Workgroup
def removeGroup(connection, groupName, groupObjectForm, options):
    flavor = 'workgroup-admin'
    removingParam = [{"object":[groupObjectForm],"options":options}]
    try:
        requestResult = connection.request('schoolgroups/remove', \
                removingParam, flavor)
        if requestResult:
            print('Group', groupName, 'removed successfully')
            returnValue = 1
        else:
            print('Group', groupName, 'fail to be removed')
            returnValue = 0
    except Exception as e:
        print("Exception: '%s' '%s' '%r'" % (str(e), type(e), e))
        returnValue = 0
    return returnValue


def main():
    returnList = []
    groupName = uts.random_string()
    description = uts.random_string()
    memberList = []
    memberListdn = []
    ucr = ucr_test.UCSTestConfigRegistry()
    ucr.load()
    host = ucr.get('hostname')
    connection = UMCConnection(host)
    basedn =ucr.get('ldap/base')
    with utu.UCSTestSchool()  as schoolenv:
        schoolName, oudn = schoolenv.create_ou(displayName='')
        tea, teadn = schoolenv.create_user(schoolName, is_teacher=True)
        memberListdn.append(teadn)
        memberList.append(tea)
        stu, studn = schoolenv.create_user(schoolName)
        memberList.append(stu)
        memberListdn.append(studn)
        print('current members are:' , memberList)
        connection.auth('Administrator' ,'univention')

        # 1 creating workgroup
        returnList.append(createWorkgroup(connection, groupName, schoolName,\
                description, memberListdn, None))

        # 2 checking the existance of the created workgroup
        returnList.append(objExist('group', groupName, schoolName, basedn))

        # 3 checking if the description for the group is correct
        returnList.append(descriptionCorrect(description, groupName,\
                schoolName, basedn))

        # 4 checking if the right members are in the created group
        returnList.append(memberExist(memberList, groupName, schoolName, basedn))

        # 5 + 6 other way of checking
        queryParam = {
                'school': schoolName,
                'pattern': groupName
                }
        groupObjectForm = 'cn=' + schoolName + '-' + groupName +\
                ',cn=schueler,cn=groups,ou=' + schoolName + ',' + basedn
        flavor = 'workgroup-admin'
        try:
            requestResult = connection.request('schoolgroups/query', \
                    queryParam, flavor)
            # print (groupObjectForm, requestResult[0]['$dn$'])
            if groupObjectForm ==  requestResult[0]['$dn$']:
                print('group', groupName, ' exists through schoolgroups/query')
                returnList.append(1)
            else:
                returnList.append(0)
            if description == requestResult[0]['description']:
                print('Description matches through schoolgroups/query')
                returnList.append(1)
            else:
                returnList.append(0)
        except Exception as e:
            print("Exception: '%s' '%s' '%r'" % (str(e), type(e), e))
            returnList.append(1)

        # 7 checking if the share object exists
        returnList.append(objExist('file share', groupName, schoolName, basedn))

        # 8 should fail: creating a new working group with the same name
        returnList.append(createWorkgroup(connection, groupName, schoolName, \
                description, memberListdn, None))

        # 9 modify members from the group
        newUid = uts.random_string()
        if changeUid(connection, memberList[0], newUid,schoolName,basedn,True):
            memberList[0] = newUid
            print('current members are:' , memberList)
            returnList.append(1)
        else:
            returnList.append(0)

        # 10 checking if the right members are in the created group
        returnList.append(memberExist(memberList,groupName,schoolName,basedn))

        # 11 remove the group
        returnList.append(removeGroup(connection,groupName,groupObjectForm,None))

        # 12 check if the object is removed from ldap
        returnList.append(objExist('group', groupName, schoolName, basedn))

    print(returnList)
    if returnList == [1,1,1,1,1,1,1,1,1,1,1,1]:
        returnValue = 0
    else:
        returnValue = 1
    return returnValue

if __name__ == '__main__':
    sys.exit(main())
