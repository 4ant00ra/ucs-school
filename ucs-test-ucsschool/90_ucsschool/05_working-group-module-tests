#!/usr/share/ucs-test/runner python
## desc: ucs-school-workinggroup-module-check
## roles: [domaincontroller_master, domaincontroller_backup, domaincontroller_slave]
## tags: [apptest]
## exposure: safe
## packages:
##   - ucs-school-umc-groups

from univention.lib.umc_connection import UMCConnection
import httplib, sys
import univention.testing.strings as uts
import univention.testing.ucr as ucr_test
import univention.testing.ucsschool as utu
import univention.testing.utils as utils
import univention.uldap as uu

# check for group and file share objects existance in ldap
def objExist(ulconnection, groupName, schoolName, basedn, expected_group_result, expected_share_result):
    groupdn = 'cn=%s-%s,cn=schueler,cn=groups,ou=%s,%s' % (schoolName, groupName, schoolName, basedn)
    sharedn = 'cn=%s-%s,cn=shares,ou=%s,%s' % ( schoolName, groupName, schoolName,basedn)
    cn = 'cn=%s-%s' % (schoolName, groupName)
    found = ulconnection.searchDn(filter = cn)
    if (groupdn in found) != expected_group_result:
            utils.fail('group object found = %s' % (str(expected_group_result)))
    if (sharedn in found) != expected_share_result :
            utils.fail('share object found = %s' % (str(expected_share_result)))
    return

# checking group attributes in ldap
def checkAttr(ulconnection, memberList, groupName,schoolName, basedn, description=None):
    returnList = []
    groupdn = 'cn=%s-%s,cn=schueler,cn=groups,ou=%s,%s' % (schoolName, groupName, schoolName, basedn)
    currentMembers = sorted(ulconnection.getAttr(groupdn, 'memberUid'))
    if sorted(memberList) != currentMembers:
        utils.fail('members are not in group')
    currentDescription = ulconnection.getAttr(groupdn, 'description')[0]
    if description != currentDescription:
        utils.fail('description not correct in group')
    return

# creating Workgroup
def createWorkgroup(connection, groupName, schoolName, description, memberListdn, options):
    flavor = 'workgroup-admin'
    creationParam = [
            {
                'object':{
                    'school': schoolName,
                    'name' : groupName,
                    'description':description,
                    'members':memberListdn
                },
                'options':options
                }
            ]
    try:
        requestResult = connection.request('schoolgroups/add',creationParam ,flavor)
        if not requestResult:
            utils.fail('Group', groupName, 'failed to be added')
    except httplib.HTTPException as e:
        ex = 'The groupname is already in use as groupname or as username'
        if ex in str(e):
            print('Fail : %s' % (ex) )
        else:
            print("Exception: '%s' '%s' '%r'" % (str(e), type(e), e))
            raise
    return

# Removing a Workgroup
def removeGroup(connection, groupName, schoolName, basedn, options):
    groupdn = 'cn=%s-%s,cn=schueler,cn=groups,ou=%s,%s' % (schoolName, groupName, schoolName, basedn)
    flavor = 'workgroup-admin'
    removingParam = [{"object":[groupdn],"options":options}]
    requestResult = connection.request('schoolgroups/remove', removingParam, flavor)
    if not requestResult:
        utils.fail('Group', groupName, 'failed to be removed')
    return

# add members to workgroup
def addMembers(ulconnection, connection, groupName, schoolName, basedn,\
        description, memberListdn, options) :
    flavor = 'workgroup-admin'
    groupdn = 'cn=%s-%s,cn=schueler,cn=groups,ou=%s,%s' % (schoolName, groupName, schoolName, basedn)
    currentMembers = sorted(ulconnection.getAttr(groupdn, 'uniqueMember'))
    for member in memberListdn:
        if member not in currentMembers:
            currentMembers.append(member)
        else:
            print('member', member, 'already exist in the group')
    creationParam = [{
        'object':{
            '$dn$' : groupdn,
            'school': schoolName,
            'name' : groupName,
            'description':description,
            'members':currentMembers
            },
        'options':options
        }]
    requestResult = connection.request('schoolgroups/put', creationParam ,flavor)
    if not requestResult:
        utils.fail('Members', currentMembers, 'failed to be added')
    return

# remove members from a workgroup
def removeMembers(ulconnection, connection, groupName, schoolName, basedn,description, memberListdn, options):
    flavor = 'workgroup-admin'
    groupdn = 'cn=%s-%s,cn=schueler,cn=groups,ou=%s,%s' % (schoolName, groupName, schoolName, basedn)
    currentMembers = sorted(ulconnection.getAttr(groupdn, 'uniqueMember'))
    for member in memberListdn:
        if member in currentMembers:
            currentMembers.remove(member)
    creationParam = [{
        'object':{
            '$dn$' : groupdn,
            'school': schoolName,
            'name' : groupName,
            'description':description,
            'members':currentMembers
            },
        'options':options
        }]
    requestResult = connection.request('schoolgroups/put',creationParam , flavor)
    if not requestResult:
        utils.fail('Members', currentMembers, 'failed to be removed')
    return

def main():
    # initinalizing
    returnList = []
    emptygroupName = uts.random_string()
    groupName = uts.random_string()
    description = uts.random_string()
    emptydescription = uts.random_string()
    memberList = []
    memberListdn = []
    ucr = ucr_test.UCSTestConfigRegistry()
    ucr.load()
    host = ucr.get('hostname')
    connection = UMCConnection(host)
    basedn =ucr.get('ldap/base')
    with utu.UCSTestSchool()  as schoolenv:
        schoolName, oudn = schoolenv.create_ou(displayName='')
        tea, teadn = schoolenv.create_user(schoolName, is_teacher=True)
        memberListdn.append(teadn)
        memberList.append(tea)
        stu, studn = schoolenv.create_user(schoolName)
        memberList.append(stu)
        memberListdn.append(studn)
        connection.auth('Administrator' ,'univention')
        ulconnection = uu.getMachineConnection(ldap_master=False)

        try:
            # 1 creating empty workgroup
            createWorkgroup(connection, emptygroupName, schoolName,emptydescription, [], None)

            # 2 creating none-empty workgroup
            createWorkgroup(connection, groupName, schoolName, description, memberListdn, None)

            # 3 checking the created workgroup and its file share object in ldap
            objExist(ulconnection, groupName, schoolName, basedn, True, True)

            # 4 checking if the atrriputes for the group is correct in ldap
            checkAttr(ulconnection, memberList, groupName, schoolName, basedn, description)

            # 5 should fail: creating a new working group with the same name
            createWorkgroup(connection, groupName, schoolName,description, memberListdn, None)

            # 6 add members to group
            addMembers(ulconnection, connection, emptygroupName, schoolName, basedn,\
                    emptydescription, memberListdn,None)

            # 7 remove members from a group
            membersToRemove = [memberListdn[0]]
            removeMembers(ulconnection, connection, groupName,schoolName, basedn, description,\
                    membersToRemove,None)

            # 8 checking if the atrriputes for the emptygroup is correct in ldap
            checkAttr(ulconnection, memberList, emptygroupName, schoolName, basedn, emptydescription)

            # 9 checking if the atrriputes for the group is correct in ldap
            checkAttr(ulconnection, [memberList[1]], groupName, schoolName, basedn, description)

            # 10 remove the group
            removeGroup(connection,groupName,schoolName, basedn, None)

            # 11 check if the object is removed from ldap
            objExist(ulconnection, groupName, schoolName, basedn, False, False)

        except Exception as e:
            print("Exception: '%s' '%s' '%r'" % (str(e), type(e), e))
            raise
    return 0

if __name__ == '__main__':
    sys.exit(main())
