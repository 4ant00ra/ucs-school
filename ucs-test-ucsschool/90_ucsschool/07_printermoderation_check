#!/usr/share/ucs-test/runner python
## desc: ucs-school-printermoderator-module-check
## roles: [domaincontroller_master, domaincontroller_backup, domaincontroller_slave]
## tags: [apptest]
## exposure: safe
## packages:  [ucs-school-umc-printermoderation]

from mimetypes import MimeTypes
from univention.lib.umc_connection import UMCConnection
from univention.management.console.modules import printermoderation
import sys, subprocess, tempfile, time
import univention.testing.strings as uts
import univention.testing.ucr as ucr_test
import univention.testing.ucsschool as utu
import univention.testing.utils as utils


# Order print job for postscript test page
def orderPrint(printer, username, file):
	cmd = ['lpr', '-P', printer, '-U', username, file]
	retval = subprocess.call(cmd)
	# if retval:
	print retval

# add / del / modify Printer
def doPrinter(operation, printer_name, schoolName, spool_host):
	uri = '%s://%s' % ('lpd', '10.200.20.20')
	print_server = '%s.%s.%s' % (spool_host, 'univention', 'local')
	f = tempfile.NamedTemporaryFile(suffix='.csv')
	line = '%s\t%s\t%s\t%s\t%s\n' % (operation, schoolName, print_server,
			printer_name, uri)
	f.write(line)
	f.flush()
	cmd = ['/usr/share/ucs-school-import/scripts/import_printer', f.name]
	retval = subprocess.call(cmd)
	f.close()
	if retval:
		print retval

# check the existance of the created printer
def printerExist(connection, printerName, schoolName, basedn):
	# check with printermoderation/printers (does not work)
	requestResult = connection.request('printermoderation/printers')
	print 'request/printermoderation/printers = ', requestResult

	# check with udm (works fine)
	printerdn = 'cn=%s,cn=printers,ou=%s,%s' % (printerName, schoolName,
			basedn)
	flavor = 'shares/print'
	container = 'cn=printers,ou=%s,%s' % (schoolName, basedn)
	param = {
			'container': container,
			'hidden': False,
			'objectProperty': 'None',
			'objectPropertyValue': '',
			'objectType': flavor
			}
	requestResult = connection.request('udm/query', param)
	print 'request/udm = ', requestResult
	for dic in requestResult:
		if printerdn == dic['$dn$']:
			exist = True
			print 'printer found'
	if not exist:
		utils.fail('Printer created was not found')

# get the current printed jobs
def queryPrintJobs(connection, printerName, cName, schoolName, pattern, basedn):
	if cName != 'None':
		cdn = 'cn=%s-%s,cn=klassen,cn=schueler,cn=groups,ou=%s,%s' % (schoolName,
			cName, schoolName, basedn)
	else:
		cdn = cName
	param = {
			'school': schoolName,
			'class': cdn,
			'pattern': pattern
			}
	print 'cName= ' , cName, cdn
	requestResult = connection.request('printermoderation/query', param)
	return requestResult

# delete a specific printjob
def delPrintJob(connection, userName, printJob):
	param = {
			'username': userName,
			'printjob': printJob
			}
	requestResult = connection.request('printermoderation/delete', param)
	print 'request/printermoderation/delete = ', requestResult

# Check the file type of the printed pdf
# there is another lib: python-magic but it is not installed by default
def checkPrintJobs(printJobs):
	mime = MimeTypes()
	for job in printJobs:
		mime_type = mime.guess_type(job)
		print 'filetype for', job, ' = ', mime_type

# download print jobs
def downloadPrintJobs(connection, userName, printJob):
	param = {
			'username': userName,
			'printjob': printJob
			}
	requestResult = connection.request('printermoderation/download', param)

# get all print jobs for a specific user
def getPrintJobs(alljobs, userName):
	return ([x['id'] for x in alljobs if x['username']==userName])

# Accept printjobs and send them to the hard printer
def acceptprint(connection, userName, printJob, printerName):
	param = {
			'username': userName,
			'printjob': printJob,
			'printer': printerName
			}
	requestResult = connection.request('printermoderation/printit', param)
	print 'request/printermoderation/printit = ', requestResult


def main():
	with utu.UCSTestSchool()  as schoolenv:
		default_printer = 'PDFDrucker'
		newPrinterName = uts.random_string()
		test_file = 'testpage.ps'
		ucr = ucr_test.UCSTestConfigRegistry()
		ucr.load()
		host = ucr.get('hostname')
		basedn = ucr.get('ldap/base')
		co = UMCConnection(host)
		co.auth('Administrator' ,'univention')
		schoolName, oudn = schoolenv.create_ou()
		tea1, teadn1 = schoolenv.create_user(schoolName, classes='1A', is_teacher=True)
		tea2, teadn2 = schoolenv.create_user(schoolName, classes='2B', is_teacher=True)
		stu1, stu1dn = schoolenv.create_user(schoolName, classes='1A')
		stu2, stu2dn = schoolenv.create_user(schoolName, classes='2B')

		co1 = UMCConnection(host)
		co1.auth(tea1 ,'univention')
		co2 = UMCConnection(host)
		co2.auth(tea2 ,'univention')

		# create new printer
		doPrinter('A', newPrinterName, schoolName, host)
		print printerExist(co, newPrinterName, schoolName, basedn)

		print stu1, stu2
		# order print job by stu 1
		orderPrint(default_printer, stu1, test_file)
		time.sleep(5)
		# order print job by stu 2
		orderPrint(default_printer, stu2, test_file)

		# query all orderd print jobs
		alljobs = queryPrintJobs(co, newPrinterName, 'None', schoolName, "", basedn)
		print 'alljobs = ', alljobs

		# query all orderd print jobs from classes 1A, 2B
		alljobs1A = queryPrintJobs(co1, newPrinterName, '1A', schoolName, "", basedn)
		print 'alljobs1A = ', alljobs1A
		alljobs2B = queryPrintJobs(co2,  newPrinterName, '2B', schoolName, "", basedn)
		print 'alljobs2B = ', alljobs2B

		# get stu1 print jobs
		printJobs1 = getPrintJobs(alljobs, stu1)
		print 'print1 = ', printJobs1
		# get stu2 print jobs
		printJobs2 = getPrintJobs(alljobs, stu2)
		print 'print 2= ', printJobs2

		# check file type for the printed files
		checkPrintJobs(printJobs1)
		checkPrintJobs(printJobs2)

		# download print jobs for stu1
		downloadPrintJobs(co, stu1, printJobs1[0])

		# accepting a print job from stu 1
		try:
			acceptprint(co, stu1, printJobs1[0], newPrinterName)
		except Exception as e:
			print 'Unexpected exception:', e

		# delete a print job for stu 1
		delPrintJob(co, stu1, printJobs1[0])

		# delete a print job for stu 2
		delPrintJob(co, stu2, printJobs2[0])

		# delete the created printer
		doPrinter('D', newPrinterName, schoolName, host)

if __name__ == '__main__':
	sys.exit(main())
