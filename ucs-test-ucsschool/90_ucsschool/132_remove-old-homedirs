#!/usr/share/ucs-test/runner python
## -*- coding: utf-8 -*-
## desc: test deletion of users home directory by listener module
## roles: [domaincontroller_slave]
## tags: [apptest, ucsschool]
## bugs: [41989]
## packages: [ucs-school-old-homedirs]
## exposure: dangerous

import os
from ldap.filter import escape_filter_chars
import univention.testing.strings as uts
from univention.testing import utils
import univention.testing.udm
import univention.testing.ucsschool as utu
from univention.testing.ucs_samba import wait_for_drs_replication
from ucsschool.lib.models import School, SchoolClass, User
from essential.importusers_cli_v2 import CLI_Import_v2_Tester


class Test(CLI_Import_v2_Tester):
	def __init__(self):
		self.ou_A = None
		self.ou_B = None
		self.ou_C = None
		super(Test, self).__init__()

	def run(self):
		try:
			with univention.testing.udm.UCSTestUDM() as udm:
				self.udm = udm
				with utu.UCSTestSchool() as schoolenv:
					self.lo = schoolenv.open_ldap_connection()
					self.schoolenv = schoolenv
					self.ou_A.name, self.ou_A.dn = schoolenv.create_ou(name_edudc=self.ucr.get('hostname'))
					self.ou_B.name, self.ou_B.dn = schoolenv.create_ou()
					self.log.info(
						'*** This host is responsible for OU %r, but not for OU %r.',
						self.ou_A.name,
						self.ou_B.name)
					all_local_schools = [school.dn for school in School.get_all(self.lo)]
					self.log.info('*** This hosts school OUs: %r\n\n', all_local_schools)
					if self.ou_B.name in all_local_schools:
						utils.fail('Found OU %r in local schools.' % self.ou_B.name)

					self.test()
					self.log.info('Test was successful.\n\n\n')
		finally:
			self.cleanup()

	def test(self):
		class_A_dn, class_A_name = self.udm.create_group(
			position=SchoolClass.get_container(self.ou_A.name),
			name="{}-{}".format(self.ou_A.name, uts.random_groupname()))
		class_B_dn, class_B_name = self.udm.create_group(
			position=SchoolClass.get_container(self.ou_B.name),
			name="{}-{}".format(self.ou_B.name, uts.random_groupname()))

		for role in ('student', 'teacher', 'staff', 'teacher_and_staff'):
			self.log.info('*** Creating user with role %r in OUs %r', role, [self.ou_A.name, self.ou_B.name])
			kwargs = dict(
				ou_name=self.ou_A.name,
				schools=[self.ou_A.name, self.ou_B.name],
				classes=','.join([class_A_name, class_B_name]),
			)
			if role in ['teacher', 'teacher_and_staff']:
				kwargs['is_teacher'] = True
			if role in ['staff', 'teacher_and_staff']:
				kwargs['is_staff'] = True
			username, userdn = self.schoolenv.create_user(**kwargs)
			wait_for_drs_replication('cn={}'.format(escape_filter_chars(username)))
			user = User.from_dn(userdn, None, self.lo)
			homedir = user.get_udm_object(self.lo)['unixhome']
			self.log.info('homedir=%r', homedir)
			os.makedirs(homedir, 0750)
			if not os.path.exists(homedir) and os.path.isdir(homedir):
				utils.fail('Homedir %r was not created.' % homedir)

			self.log.info(
				'*** Removing %r from OU %r, should remove home directory %r on this host...',
				role,
				self.ou_A.name,
				homedir)
			user.remove_from_school(self.ou_A.name, self.lo)
			utils.wait_for_replication_and_postrun()
			wait_for_drs_replication('cn={}'.format(escape_filter_chars(username)))
			if os.path.exists(homedir):
				utils.fail('Homedir %r was not removed.' % homedir)


def main():
	tester = Test()
	try:
		tester.run()
	finally:
		tester.cleanup()


if __name__ == '__main__':
	main()
