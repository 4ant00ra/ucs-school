#!/usr/share/ucs-test/runner python
## desc: ucs-school-reset-password-check
## roles: [domaincontroller_master]
## tags: [apptest]
## exposure: safe
## packages:
##   - ucs-school-umc-users

from univention.lib.umc_connection import UMCConnection
import sys, os, time
import univention.testing.strings as uts
import univention.testing.ucr as ucr_test
import univention.testing.ucsschool as utu

def auth(host, username, password):
	newpassword = uts.random_string()
	connection = UMCConnection(host)
	try:
		data = connection.build_data({'username' : username, 'password' : password})
		co = connection.get_connection()
		co.request('POST', '/umcp/auth', data)
		response = co.getresponse()
		print 'response: %s ' % response.status
		if response.status == 415:
			print "nextLogin parameter is set to True"
			returnValue = 0
		elif response.status == 200:
			print "nextLogin parameter is set to False"
			returnValue = 0
		else:
			returnValue = 1
	except Exception as e:
		print "Auth exception: '%s' '%s' '%r'" % (str(e), type(e), e)
		returnValue = 1
	return returnValue

def main():
	newpassword = 'Univention.99'
	ucr =  ucr_test.UCSTestConfigRegistry()
	ucr.load()
	host = ucr.get('hostname')
	marks = []
	with utu.UCSTestSchool()  as schoolenv:
		schoolName, oudn = schoolenv.create_ou(displayName='')
		teachers = []
		teachersDn = []
		students = []
		studentsDn = []
		for i in [0,1]:
			tea, teadn = schoolenv.create_user(schoolName, is_teacher=True)	
			teachers.append(tea)
			teachersDn.append(teadn)
			stu, studn = schoolenv.create_user(schoolName)	
			students.append(stu)
			studentsDn.append(studn)
		pair01 = [teachers[0], students[0]]
		pair02 = [teachersDn[1], studentsDn[1]]
		pair03 = [teachers[1], students[1]]
		for i in [0,1]:
			if pair01[i] in teachers:
				flavor1 = "teacher"
			else:
				flavor1 = "student"
			for j in [0,1]:
				if pair02[j] in teachersDn:
					flavor = "teacher"
				else:
					flavor = "student"
				for pwdChangeNextLogin in [True, False]:
					options = {
							'userDN':pair02[j],
							'newPassword':newpassword,
							'nextLogin':pwdChangeNextLogin
							}
					connection = UMCConnection(host)
					connection.auth(pair01[i], 'univention')
					try: 
						resetResult = connection.request('schoolusers/password/reset', options, flavor)
						authResult = auth(host, pair03[j], newpassword)
						print resetResult, authResult
						if (resetResult and not authResult):
							print "Password reset successfully for ", flavor,  pair03[j], \
							" by ", flavor1, pair01[i], ".\n"
							marks.append(0)
						else:
							print "Password is not reset successfully for ", flavor,  pair03[j], \
							" by ",	flavor1, pair01[i], ".\n"
							marks.append(1)
					except Exception as e:
						if ('command forbidden: schoolusers/password/reset' in e):
							marks.append(0)
							print "Password is not allowed to be reset for ", flavor,  pair03[j],\
							" by ", flavor1, pair01[i], ".\n"
						else:
							marks.append(1)
							print "Exception: %s " % e
	if marks == [0,0,0,0,0,0,0,0]:
		returnValue = 0
	else:
		returnValue = 1
        return returnValue

if __name__ == '__main__':
        sys.exit(main())
