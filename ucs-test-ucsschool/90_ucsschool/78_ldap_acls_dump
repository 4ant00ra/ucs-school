#!/usr/share/ucs-test/runner python
# coding=utf-8
## desc: Dump access to all available objects
## roles: [domaincontroller_master]
## tags: [ucsschool]
## timeout: 28800
## exposure: dangerous
## packages: [ucs-school-ldap-acls-master]

import os
import sys
import ldif
import shutil
import time
import subprocess
from multiprocessing import Pool

import univention.admin.uldap
import univention.testing.ucr as ucr_test
import univention.testing.udm
import univention.testing.ucsschool as utu

def normalize_permission(perms):
	level_to_priv = {
		'none': '0',
		'disclose': 'd',
		'auth': 'xd',
		'compare': 'cxd',
		'search': 'scxd',
		'read': 'rscxd',
		'write': 'wrscxd',
		'add': 'arscxd',
		'delete': 'zrscxd',
		'manage': 'mwrscxd',
	}
	if not perms.startswith('='):
		perms = '=%s' % level_to_priv[perms.split('(', 1)[0]]
	return perms

def test_acls(args):
	binddn, dn, attr = args
	sub_entry = {}
	process = subprocess.Popen(['slapacl', '-d0', '-D', binddn, '-b', dn, attr], stderr=subprocess.PIPE)
	_, stderr = process.communicate()
	for line in stderr.splitlines():
		if line.startswith('%s: ' % (attr,)):
			sub_entry.setdefault(attr, []).append(normalize_permission(line.split(': ', 1)[-1].strip()))
	try:
		sub_entry[attr]
	except KeyError as exc:
		print >> sys.stderr, dn, exc
		return 1, {}
	return 0, sub_entry

def parse_acls(lo, binddn, output=sys.stdout, valid_ou_names=None):
	if isinstance(output, basestring):
		output = open(output, 'wb')
	entries = lo.search()

	# skip OUs that are not in valid_ou_names or "ou=Domain Controllers"
	valid_ous = [',ou=%s' % (x,) for x in valid_ou_names + ['Domain Controllers']]
	entries = [(dn, attrs) for dn, attrs in entries if (',ou=' not in dn) or (any([x in dn for x in valid_ous]))]

	code = 0
	pool = Pool()  # uses NUMBER_OF_CPUS worker processes by default

	time_start = time.time()
	writer = ldif.LDIFWriter(output)
	for dn, attrs in entries:
		print >> sys.stderr, dn
		entry = {}
		result = pool.imap_unordered(test_acls, [(binddn, dn, attr) for attr in attrs])
		for (sub_code, sub_entry) in result:
			if sub_code:
				code = sub_code
			entry.update(sub_entry)
		writer.unparse(dn, entry)
	print '*** Runtime for parse_acls: %fs' % (time.time() - time_start,)
	return code


class Bunch(object):
	def __init__(self, **kwds):
		self.__dict__.update(kwds)

def main():
	with utu.UCSTestSchool() as schoolenv:
		with univention.testing.udm.UCSTestUDM() as udm:
			with ucr_test.UCSTestConfigRegistry() as ucr:
				generic = Bunch()

				lo = univention.admin.uldap.getAdminConnection()[0]
				generic.master_dn = lo.searchDn(filter='univentionObjectType=computers/domaincontroller_master')[0]
				generic.backup_dn = udm.create_object(
					"computers/domaincontroller_backup",
					name='schoolTestBackup',
					position="cn=dc,cn=computers,%(ldap/base)s" % ucr,
					domain=ucr.get('domainname'),
					)
				generic.slave_dn = udm.create_object(
					"computers/domaincontroller_slave",
					name='schoolTestSlave',
					position="cn=dc,cn=computers,%(ldap/base)s" % ucr,
					domain=ucr.get('domainname'),
					)
				generic.member_dn = udm.create_object(
					"computers/memberserver",
					name='schoolTestMember',
					position="cn=computers,%(ldap/base)s" % ucr,
					domain=ucr.get('domainname'),
					)
				generic.winclient_dn = udm.create_object(
					"computers/windows",
					name='schoolTestWinDom',
					position="cn=computers,%(ldap/base)s" % ucr,
					)
				generic.domain_user_dn = udm.create_user(username='domainUser')[0]

				schoolA = Bunch()
				schoolB = Bunch()

				for suffix, school in (
						('A', schoolA),
						('B', schoolB),
						):
					print '---%s-----------------------------------------------------' % (suffix,)
					school.name, school.dn = schoolenv.create_ou(ou_name='school%s' % (suffix,), name_edudc=ucr.get('hostname'))

					if suffix == 'A':
						schools = [schoolA.name]
					else:
						schools = [schoolA.name, schoolB.name]
					school.teacher_name, school.teacher_dn = schoolenv.create_user(school.name, username='teacher%s' % (suffix,), schools=schools, is_teacher=True)
					school.teacher_staff_name, school.teacher_staff_dn = schoolenv.create_user(school.name, username='teachstaff%s' % (suffix,), schools=schools, is_teacher=True, is_staff=True)
					school.staff_name, school.staff_dn = schoolenv.create_user(school.name, username='staff%s' % (suffix,), schools=schools, is_staff=True)
					school.student_name, school.student_dn = schoolenv.create_user(school.name, username='student%s' % (suffix,), schools=schools)
					school.admin_name, school.admin_dn = schoolenv.create_school_admin(school.name, username='schooladmin%s' % (suffix,), schools=schools)

					school.schoolserver_dn = lo.searchDn(base=school.dn, filter='univentionObjectType=computers/domaincontroller_slave')[0]

					school.winclient_dn = udm.create_object(
						"computers/windows",
						name='schoolwin%s' % (suffix,),
						position="cn=computers,%s" % (school.dn,),
					)

				def do_test(resultdir, valid_ou_names):
					os.makedirs(resultdir)
					for i, dn in enumerate([
							'cn=admin,%(ldap/base)s' % ucr,
							generic.master_dn,
							generic.backup_dn,
							generic.slave_dn,
							generic.member_dn,
							generic.winclient_dn,
							'uid=Administrator,cn=users,%(ldap/base)s' % ucr,
							generic.domain_user_dn,
							schoolA.schoolserver_dn,
							schoolB.schoolserver_dn,
							schoolA.winclient_dn,
							schoolB.winclient_dn,
							schoolA.teacher_dn,
							schoolB.teacher_dn,
							schoolA.student_dn,
							schoolB.student_dn,
							schoolA.teacher_staff_dn,
							schoolB.teacher_staff_dn,
							schoolA.staff_dn,
							schoolB.staff_dn,
							schoolA.admin_dn,
							schoolB.admin_dn,
							]):
						with open(os.path.join(resultdir, 'dn.txt'), 'a+') as fd:
							fd.write('%d ==> %s\n' % (i, dn))
						parse_acls(lo, dn, output=os.path.join(resultdir, 'dn%d.ldif' % (i,)), valid_ou_names=valid_ou_names)

				BASE_DIR = '/etc/univention/templates/files/etc/ldap/slapd.conf.d'
				FN_TEMPL1_ORIG = os.path.join(BASE_DIR, '61ucsschool_presettings')
				FN_TEMPL2_ORIG = os.path.join(BASE_DIR, '65ucsschool')
				FN_TEMPL1_BACKUP = FN_TEMPL1_ORIG + '.BACKUP'
				FN_TEMPL2_BACKUP = FN_TEMPL2_ORIG + '.BACKUP'
				FN_TEMPL1_TEST = '78_ldap_acls_dump.oldconfig.61ucsschool_presettings'
				FN_TEMPL2_TEST = '78_ldap_acls_dump.oldconfig.65ucsschool'
				now = int(time.time())
				try:
					print '\n'
					shutil.move(FN_TEMPL1_ORIG, FN_TEMPL1_BACKUP)
					shutil.move(FN_TEMPL2_ORIG, FN_TEMPL2_BACKUP)
					with open(FN_TEMPL1_ORIG, 'w') as fd_dst, open(FN_TEMPL1_TEST, 'r') as fd_src:
						fd_dst.write(fd_src.read())
					with open(FN_TEMPL2_ORIG, 'w') as fd_dst, open(FN_TEMPL2_TEST, 'r') as fd_src:
						fd_dst.write(fd_src.read())
					subprocess.check_call(['ucr', 'commit', '/etc/ldap/slapd.conf'])
					if subprocess.check_call(['invoke-rc.d', 'slapd', 'restart']):
						utu.fail('Restarting slapd with test config 1 failed!')
					testdir = '/var/log/univention/78_ldap_acls_dump.%d.oldconfig' % (now,)
					do_test(testdir, [schoolA.name, schoolB.name])
				finally:
					shutil.move(FN_TEMPL1_BACKUP, FN_TEMPL1_ORIG)
					shutil.move(FN_TEMPL2_BACKUP, FN_TEMPL2_ORIG)
					subprocess.call(['ucr', 'commit', '/etc/ldap/slapd.conf'])
					subprocess.call(['invoke-rc.d', 'slapd', 'restart'])

				print '\n'
				testdir = '/var/log/univention/78_ldap_acls_dump.%d.newconfig' % (now,)
				do_test(testdir, [schoolA.name, schoolB.name])


if __name__ == '__main__':
	main()
