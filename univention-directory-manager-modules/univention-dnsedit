#!/usr/bin/python2.6
# -*- coding: utf-8 -*-
#
# Univention Admin Modules
#  easy to create and modify dns objects
#
# Copyright 2004-2012 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.


import os, sys, getopt, codecs, string, time
import univention.debug
univention.debug.init('/var/log/univention/admin-cmd.log', 1, 1)

import univention.config_registry
import univention.admin.uldap
import univention.admin.config
import univention.admin.modules
import univention.admin.objects
import univention.admin.filter
import univention.admin.handlers.dns.forward_zone
import univention.admin.handlers.dns.reverse_zone
import univention.admin.handlers.dns.host_record
import univention.admin.handlers.dns.txt_record
import univention.admin.handlers.dns.ptr_record
import univention.admin.handlers.dns.srv_record
import univention.admin.handlers.dns.alias
import univention.admin.uexceptions

options={}
options['ignore-missing-zone']=0
options['ignore-exists']=0
options['quiet']=0
options['reverse']=0
options['overwrite']=0
options['stoptls']=0
options['binddn']=0
options['bindpwd']=0
options['help']=0

def usage():
	print >>sys.stderr, 'Usage: %s command [args]' % sys.argv[0]

def help():
	print >>sys.stderr,"Valid Commands are:"
	for elements in options.keys():
		print >>sys.stderr,elements

for elements in sys.argv[1:]:
        if elements.startswith('--'):
		elements=elements.replace('--','')
                if elements not in options.keys():
                        err = '%s: Unknown Command %s' % (sys.argv[0], elements)
                        univention.debug.debug(univention.debug.ADMIN, univention.debug.WARN, err)
                        print err
                        sys.exit(1)

opts, args=getopt.getopt(sys.argv[1:], '', ['ignore-missing-zone', 'quiet', 'reverse', 'ignore-exists', 'stoptls', 'binddn=', 'bindpwd=', 'overwrite','help'])


for opt, val in opts:
	if opt == '--ignore-missing-zone':
		options['ignore-missing-zone']=1
	elif opt == '--ignore-exists':
		options['ignore-exists']=1
	elif opt == '--quiet':
		options['quiet']=1
	elif opt == '--reverse':
		options['reverse']=1
	elif opt == '--stoptls':
		options['stoptls']=1
	elif opt == '--overwrite':
		options['overwrite']=1
	elif opt == '--binddn':
		options['binddn']=val
	elif opt == '--bindpwd':
		options['bindpwd']=val
	elif opt == '--help':
		help()
		sys.exit(1)

co=None
lo=None
position=None
if options['stoptls']:
	start_tls=0
else:
	start_tls=2

configRegistry=univention.config_registry.ConfigRegistry()
configRegistry.load()

timeout=time.time() + 120	# 2 minutes from now
def bind():
	if time.time() > timeout:
		err = '%s: LDAP server %s unreachable, aborting' % (sys.argv[0], configRegistry['ldap/master'])
		univention.debug.debug(univention.debug.ADMIN, univention.debug.WARN, err)
		print err
		sys.exit(1)
	if options['binddn'] and options['bindpwd']:
		try:
			lo=univention.admin.uldap.access(host=configRegistry['ldap/master'], port=int(configRegistry.get('ldap/master/port', '7389')), base=configRegistry['ldap/base'], binddn=options['binddn'], bindpw=options['bindpwd'], start_tls=start_tls)
			position=univention.admin.uldap.position(lo.base)
			return lo, position
		except univention.admin.uexceptions.authFail, e:
			univention.debug.debug(univention.debug.ADMIN, univention.debug.WARN, 'authentication error: %s' % str(e))
			print 'authentication error: %s' % str(e)
			sys.exit(1)
		except univention.admin.uexceptions.ldapError, e:
			msg = '%s: timeout while trying to contact LDAP server %s' % (sys.argv[0], configRegistry['ldap/master'])
			univention.debug.debug(univention.debug.ADMIN, univention.debug.WARN, msg)
			print msg
			time.sleep(10)
			lo, position = bind()
			return lo, position
		except univention.admin.uldap.ldap.LDAPError, e:
			msg = '%s: timeout while trying to contact LDAP server %s' % (sys.argv[0], configRegistry['ldap/master'])
			univention.debug.debug(univention.debug.ADMIN, univention.debug.WARN, msg)
			print msg
			time.sleep(10)
			lo, position = bind()
			return lo, position
	elif not options['binddn'] and not options['bindpwd']:
		try:
			lo, position=univention.admin.uldap.getAdminConnection(start_tls)
			return lo, position
		except univention.admin.uexceptions.authFail, e:
			univention.debug.debug(univention.debug.ADMIN, univention.debug.WARN, 'authentication error: %s' % str(e))
			print 'authentication error: %s' % str(e)
			sys.exit(1)
		except univention.admin.uexceptions.ldapError, e:
			msg = '%s: timeout while trying to contact LDAP server %s' % (sys.argv[0], configRegistry['ldap/master'])
			univention.debug.debug(univention.debug.ADMIN, univention.debug.WARN, msg)
			print msg
			time.sleep(10)
			lo, position = bind()
			return lo, position
		except univention.admin.uldap.ldap.LDAPError, e:
			msg = '%s: timeout while trying to contact LDAP server %s' % (sys.argv[0], configRegistry['ldap/master'])
			univention.debug.debug(univention.debug.ADMIN, univention.debug.WARN, msg)
			print msg
			time.sleep(10)
			lo, position = bind()
			return lo, position
	elif options['binddn']:
		univention.debug.debug(univention.debug.ADMIN, univention.debug.WARN, 'authentication error: missing --bindpwd')
		print 'authentication error: missing --bindpwd'
		sys.exit(1)
	else:	# options['bindpwd']
		univention.debug.debug(univention.debug.ADMIN, univention.debug.WARN, 'authentication error: missing --binddn')
		print 'authentication error: missing --binddn'
		sys.exit(1)
lo, position = bind()

def lookup_zone(zone_name):
	if not options['reverse']:
		zones=univention.admin.handlers.dns.forward_zone.lookup(co, lo, '(zone=%s)' % zone_name, scope='domain', base=position.getDomain(), unique=1)
	else:
		zones=univention.admin.handlers.dns.reverse_zone.lookup(co, lo, '(subnet=%s)' % zone_name, scope='domain', base=position.getDomain(), unique=1)
	if not zones:
		if options['ignore-missing-zone']:
			sys.exit(0)
		else:
			print >>sys.stderr, 'E: Zone %s does not exist.' % zone_name
			sys.exit(1)
	return zones[0]

try:
	zone_name=args[0]
	command=args[1]
	type=args[2]
except IndexError:
	print >>sys.stderr, 'E: Missing command or value. Use --help for further Information'
	sys.exit(1)

if type != 'zone' or command == 'remove':
	zone=lookup_zone(zone_name)
	position.setDn(zone.dn)
else:
	position.setDn(univention.admin.config.getDefaultContainer(lo, 'dns/'))

def add_srv_record(args):
	service=args[0]
	protocol=args[1]
	location=args[2:6]

	name=[service, protocol]
	filter=univention.admin.filter.expression('name', name)

	records=univention.admin.handlers.dns.srv_record.lookup(co, lo, filter, scope='domain', base=position.getDomain(), superordinate=zone, unique=1)
	if records:
		record=records[0]
	else:
		record=univention.admin.handlers.dns.srv_record.object(co, lo, position, superordinate=zone)
		record['name']=name

	l=record['location']
	if location in l:
		return
	l.append(location)
	record['location']=l

	if records:
		record.modify()
	else:
		record.create()

def remove_srv_record(args):
	service=args[0]
	protocol=args[1]
	location=args[2:6]

	name=[service, protocol]
	filter=univention.admin.filter.expression('name', name)

	records=univention.admin.handlers.dns.srv_record.lookup(co, lo, filter, scope='domain', base=position.getDomain(), superordinate=zone, unique=1)
	if records:
		record=records[0]
	else:
		record=univention.admin.handlers.dns.srv_record.object(co, lo, position, superordinate=zone)
		record['name']=name

	l=record['location']
	if location in l:
		l.remove(location)
		record['location']=l

	if records:
		record.modify()

def add_txt_record(args):
	name=args[0]
	text=args[1]

	filter=univention.admin.filter.expression('name', name)
	records=univention.admin.handlers.dns.txt_record.lookup(co, lo, filter, scope='domain', base=position.getDomain(), superordinate=zone, unique=1)
	if records:
		record=records[0]
	else:
		record=univention.admin.handlers.dns.txt_record.object(co, lo, position, superordinate=zone)
		record['name']=name
		record['zonettl']=['80600']
	
	t=record['txt']
	if text in t:
		return
	t.append(text)
	record['txt']=t

	if records:
		record.modify()
	else:
		record.create()

def add_a_record(args):
	name=args[0]
	a=args[1:]

	filter=univention.admin.filter.expression('name', name)
	records=univention.admin.handlers.dns.host_record.lookup(co, lo, filter, scope='domain', base=position.getDomain(), superordinate=zone, unique=1)
	if records:
		record=records[0]
	else:
		record=univention.admin.handlers.dns.host_record.object(co, lo, position, superordinate=zone)
		record['name']=name
		record['zonettl']=['80600']
	
	t=record['a']
	for i in a:
		if not i in t:
			t.append(i)
	record['a']=t

	if records:
		record.modify()
	else:
		record.create()


def add_cname_record(args):
	name=args[0]
	cname=args[1]

	filter=univention.admin.filter.expression('name', name)
	records=univention.admin.handlers.dns.alias.lookup(co, lo, filter, scope='domain', base=position.getDomain(), superordinate=zone, unique=1)
	if records:
		record=records[0]
	else:
		record=univention.admin.handlers.dns.alias.object(co, lo, position, superordinate=zone)
		record['name']=name
		record['zonettl']=['80600']
	
	if record['cname'] and not record['cname'] == cname and not options['overwrite'] and not options['ignore-exists']:
		print >>sys.stderr, 'E: Record exists and points to different address'
		sys.exit(1)
	if record['cname'] == cname:
		return
	record['cname']=cname

	if records:
		record.modify()
	else:
		record.create()


def add_ptr_record(args):
	address=args[0]
	ptr=args[1]

	filter=univention.admin.filter.expression('address', address)
	records=univention.admin.handlers.dns.ptr_record.lookup(co, lo, filter, scope='domain', base=position.getDomain(), superordinate=zone, unique=1)
	if records:
		record=records[0]
	else:
		record=univention.admin.handlers.dns.ptr_record.object(co, lo, position, superordinate=zone)
		record['address']=address
	
	if record['ptr_record'] and not record['ptr_record'] == ptr and not options['overwrite']:
		print >>sys.stderr, 'E: Record exists and points to different address'
		sys.exit(1)
	if record['ptr_record'] == ptr:
		return
	record['ptr_record']=ptr

	if records:
		record.modify()
	else:
		record.create()

def add_zone(args):
	contact, serial, refresh, retry, expire, ttl=args[0:6]
	nameserver=args[6:]

	if not options['reverse']:
		zone=univention.admin.handlers.dns.forward_zone.object(co, lo, position)
		zone['zone']=zone_name
	else:
		zone=univention.admin.handlers.dns.reverse_zone.object(co, lo, position)
		zone['subnet']=zone_name
	zone['contact']=contact
	zone['serial']=serial
	zone['refresh']=[refresh]
	zone['retry']=[retry]
	zone['expire']=[expire]
	zone['ttl']=[ttl]
	zone['nameserver']=nameserver
	zone.create()

if command == 'add':
	nargs=args[3:]
	
	print 'Adding %s record "%s" to zone %s...' % (type.upper(), string.join(nargs, ' '), zone_name),

	try:
		if type == 'srv':
			add_srv_record(nargs)
		elif type == 'txt':
			add_txt_record(nargs)
		elif type == 'ptr' and options['reverse']:
			add_ptr_record(nargs)
		elif type == 'cname':
			add_cname_record(nargs)
		elif type == 'a':
			add_a_record(nargs)
		elif type == 'zone':
			add_zone(nargs)
	except univention.admin.uexceptions.objectExists:
		if not options['ignore-exists']:
			print >>sys.stderr, 'E: Object exists'
			sys.exit(1)
	except ValueError,e:
		print 'failed'
		print 'E: %s'%e
		sys.exit(1)
	except univention.admin.uexceptions.valueInvalidSyntax,err:
		print 'failed'
		print 'E: %s'%err
		sys.exit(1)
	
	print 'done'
elif command == 'remove':
	nargs=args[3:]
	if type == 'srv':
		remove_srv_record(nargs)
	pass
else:
	print >>sys.stderr, 'E: No valid command found. Use --help for further information'
	sys.exit(1)
