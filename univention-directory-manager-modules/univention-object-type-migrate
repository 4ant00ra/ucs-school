#!/usr/bin/python2.6
#
'''Univention Admin Modules
migration tool for univentionObjectType'''
#
# Copyright 2005-2011 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import optparse
import sys
import univention.uldap

def buildModuleIdentifyMapping():
	import univention.admin.modules
	univention.admin.modules.update()
	return dict([(name, module.identify, ) for (name, module, ) in univention.admin.modules.modules.items() if 'identify' in dir(module)])

def parseOptions():
	parser = optparse.OptionParser(usage='Usage: %prog (-n|-a) [options]\nSet the attribute univentionObjectType for each directory object')
	parser.add_option('-n', '--no-action',
	                  dest='action', action='store_false',
	                  help='do not modify the directory, show what would have been done')
	parser.add_option('-a', '--action',
	                  dest='action', action='store_true',
	                  help='do modify the directory')
	parser.add_option('-v', '--verify',
	                  dest='verify', action='store_true', default=False,
	                  help='check objects with already set univentionObjectType')
	parser.add_option('-b', '--base',
	                  dest='base', default='',
	                  help='only modify objects at or below SEARCHBASE', metavar='SEARCHBASE')
	(options, args, ) = parser.parse_args()
	if options.action is None:
		print 'Neither --no-action nor --action given!'
		parser.print_help()
		sys.exit(3)
	if args:
		print >>sys.stderr, 'Unknown arguments %r!' % (args, )
		parser.print_help()
		sys.exit(3)
	return options

def warningSupressed(dn, attributes):
	# cn=admin,$ldap_base cn=backup,$ldap_base
	if set(attributes.keys()) == set(('objectClass', 'userPassword', 'cn', 'sn', )):
		if set(attributes['objectClass']) == set(('top', 'person', )):
			if attributes['sn'] == attributes['cn'] and len(attributes['cn']) == 1 and attributes['cn'][0] in ('admin', 'backup', ):
				return True
	# Kerberos principal objects
	if set(attributes['objectClass']) == set(('top', 'account', 'krb5Principal', 'krb5KDCEntry', )):
		if set(attributes.keys()) == set(('objectClass', 'uid', 'krb5Key', 'krb5PrincipalName', 'krb5KDCFlags', 'krb5KeyVersionNumber', )):
			return True
		if set(attributes.keys()) == set(('objectClass', 'uid', 'krb5Key', 'krb5PrincipalName', 'krb5KDCFlags', 'krb5MaxRenew', 'krb5KeyVersionNumber', 'krb5MaxLife', )):
			return True
	return False

def main(options):
	errorsOccurred = False
	if options.verify:
		searchFilter='(objectClass=*)'
	else:
		searchFilter='(!(objectClass=univentionObject))'
	moduleIdentify = buildModuleIdentifyMapping()
	uldap = univention.uldap.getAdminConnection()
	if options.action is not True:
		uldap.modify = lambda dn, changes: sys.stdout.write('Would modify %r\n' % (dn, ))
	for (dn, attributes, ) in uldap.search(filter=searchFilter, base=options.base):
		matches = [module for (module, identify, ) in moduleIdentify.items() if identify(dn, attributes)]
		if 'container/dc' in matches and ('container/ou' in matches or 'container/cn' in matches):
			# container/dc has priority (ldapbase ou=/cn= has multiple matches)
			matches = ['container/dc']
		if len(matches) == 1:
			if 'univentionObject' not in attributes['objectClass']:
				changes = [
					('objectClass', attributes['objectClass'], attributes ['objectClass'] + ['univentionObject'], ),
					('univentionObjectType', [], [matches[0], ], ),
					]
				uldap.modify(dn, changes)
			elif attributes['univentionObjectType'][0] != matches[0]:
				errorsOccurred = True
				print >>sys.stderr, 'Mismatch for %r: univentionObjectType is %r but should be %r!' % (dn, attributes['univentionObjectType'], matches, )
		elif len(matches) > 2:
			raise ValueError('Multiple matches for %r: %r!' % (dn, matches, ))
		else:
			if not warningSupressed(dn, attributes):
				print >>sys.stderr, 'Warning: No match for %r' % (dn, )
	return not errorsOccurred

if __name__ == "__main__":
	options = parseOptions()
	if not main(options):
		sys.exit(1)
