@!@
# -*- coding: utf-8 -*-
import sys
sys.path.append('/usr/share/ucs-school-ldap-acls-master/')
from acl import AccessRule, By, Who, GroupUniqueMember, Set, Group, STOP
import os.path
import urllib

replacements = {
	'DISTRICT': 'ou=[^,]+,' if configRegistry.is_true('ucsschool/ldap/district/enable', False) else '',
	'PUPILS': configRegistry.get('ucsschool/ldap/default/container/pupils', 'schueler'),
	'TEACHERS': configRegistry.get('ucsschool/ldap/default/container/teachers', 'lehrer'),
	'STAFF': configRegistry.get('ucsschool/ldap/default/container/staff', 'mitarbeiter'),
	'TEACHERS-STAFF': configRegistry.get('ucsschool/ldap/default/container/teachers-and-staff', 'lehrer und mitarbeiter'),
	'ADMINS': configRegistry.get('ucsschool/ldap/default/container/admins', 'admins'),
	'GRPADMINS': configRegistry.get('ucsschool/ldap/default/groupprefix/admins', 'admins-'),
	'EXAM': configRegistry.get('ucsschool/ldap/default/container/exam', 'examusers'),
	'SCHOOLOUATTRS': '@top,@organizationalUnit,@ucsschoolOrganizationalUnit,@univentionObject,@univentionPolicyReference',  # FIXME: extended attributes which adds object classes doesn't work
}

# FIXME: blacklisting is not enough but we need to support extended attributes/options
USER_BLACKLIST = ['univentionShare', 'univentionShareNFS', 'univentionShareSamba', 'posixGroup',]
GROUP_BLACKLIST = ['univentionShare', 'univentionShareNFS', 'univentionShareSamba', 'posixAccount', 'SambaSamAccount',]
SHARE_BLACKLIST = ['posixGroup', 'posixAccount', 'SambaSamAccount',]
DHCPSERVICE_BLACKLIST = ['posixGroup', 'posixAccount', 'SambaSamAccount', 'univentionShare', 'univentionShareNFS', 'univentionShareSamba',]
DHCP_BLACKLIST = ['posixGroup', 'posixAccount', 'SambaSamAccount', 'univentionShare', 'univentionShareNFS', 'univentionShareSamba',]
CONTAINER_BLACKLIST = ['univentionShare', 'univentionShareNFS', 'univentionShareSamba', 'SambaSamAccount']

else_zero_break = By('*', '+0', 'break')
def group_factory(name):
	def func(backref=None):
		if backref is None:
			return GroupUniqueMember("cn=%s,cn=ucsschool,cn=groups,%%(ldap/base)s" % (name,))
		return GroupUniqueMember('cn=OU$%d-%s,cn=ucsschool,cn=groups,%%(ldap/base)s' % (backref, name), 'expand')
	return func

dc_educational_group = group_factory('DC-Edukativnetz')
member_educational_group = group_factory('Member-Edukativnetz')
dc_administrative_group = group_factory('DC-Verwaltungsnetz')
member_administrative_group = group_factory('Member-Verwaltungsnetz')

def ou_group_admins(backref):
	return By(GroupUniqueMember("cn=%(GRPADMINS)s$%%d,cn=ouadmins,cn=groups,%%%%(ldap/base)s" % replacements % (backref,), 'expand'), 'write')

dc_educational_group_write = By(dc_educational_group(), 'write', STOP)
member_educational_group_write = By(member_educational_group(), 'write', STOP)
dc_administrative_group_write = By(dc_administrative_group(), 'write', STOP)
member_administrative_group_write = By(member_administrative_group(), 'write', STOP)

dc_educational_group_none = By(dc_educational_group(), 'none', STOP)
member_educational_group_none  = By(member_educational_group(), 'none', STOP)
dc_administrative_group_none = By(dc_administrative_group(), 'none', STOP)
member_administrative_group_none = By(member_administrative_group(), 'none', STOP)

school_groups_write = [dc_administrative_group_write, member_administrative_group_write, dc_educational_group_write, member_educational_group_write, else_zero_break]
school_groups_none= [dc_administrative_group_none, member_administrative_group_none, dc_educational_group_none, member_educational_group_none, else_zero_break]

school_dc_group_write = [dc_administrative_group_write, dc_educational_group_write, else_zero_break]
school_group_administrative_none = [By(dc_administrative_group(), 'none'), By(member_administrative_group(), 'none'), else_zero_break]
school_group_educational_none = [By(dc_educational_group(), 'none'), By(member_educational_group(), 'none'), else_zero_break]

def filter_set(set, setstyle=None, filter=None):
	return Set(set % dict(configRegistry.items(), filter=urllib.quote(filter)), setstyle)
TEACHER_ADMIN_STAFF = '(|(objectClass=ucsschoolTeacher)(objectClass=ucsschoolAdministrator)(objectClass=ucsschoolStaff))'
TEACHER_ADMIN = '(|(objectClass=ucsschoolTeacher)(objectClass=ucsschoolAdministrator))'

print '# start 65ucsschool'

print '# Master und Backup-Systeme duerfen die Einträge aller OUs lesen und schreiben'
print AccessRule(dn='^(.+,)?ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', by=[
	By(GroupUniqueMember('cn=DC Backup Hosts,cn=groups,%(ldap/base)s', 'expand'), 'write', STOP),
	else_zero_break,
])

print '# DC Slaves need write access to the members of the group Domain Computers'
print AccessRule(dn='cn=Domain Computers,cn=groups,%(ldap/base)s', attrs='uniqueMember,memberUid', by=school_dc_group_write)

if os.path.exists('/var/lib/univention-ldap/local-schema/msprintconnectionpolicy.schema'):
	print '# Slave DCs can read and write policy containers for MS GPOs and msPrintConnectionPolicy objects'
	print AccessRule(dn='cn=policies,cn=system,%(ldap/base)s', attrs='children', by=school_dc_group_write)
	print AccessRule(dn='cn=policies,cn=system,%(ldap/base)s', dnstyle='children', filter="(|(objectClass=msGPOContainer)(objectClass=organizationalRole)(objectClass=msPrintConnectionPolicy))",
		attrs='entry,@univentionObject,@organizationalRole,@msPrintConnectionPolicy,@msGPOContainer',
		by=school_dc_group_write,
	)

if os.path.exists('/var/lib/univention-ldap/local-schema/mswmi.schema'):
	print '# Slave DCs can read and write policy containers for MS WMI filter objects'
	print AccessRule(dn='cn=WMIPolicy,cn=system,%(ldap/base)s', attrs='children', by=school_dc_group_write)
	print AccessRule(dn='cn=WMIPolicy,cn=system,%(ldap/base)s', dnstyle='children', filter="(|(objectClass=msWMISom)(objectClass=organizationalRole))", attrs='entry,@univentionObject,@organizationalRole,@msWMISom', by=school_dc_group_write)

print '# Lehrer, Mitarbeiter und OU-Admins duerfen Schueler-Passwoerter aendern'
print AccessRule(
	filter="objectClass=ucsschoolStudent",
	attrs='krb5KeyVersionNumber,krb5KDCFlags,krb5Key,krb5PasswordEnd,sambaAcctFlags,sambaPwdLastSet,sambaLMPassword,sambaNTPassword,shadowLastChange,shadowMax,userPassword,pwhistory,sambaPwdCanChange,sambaPwdMustChange,sambaPasswordHistory,sambaBadPasswordCount',
	by=[
		By(filter_set('this/ucsschoolSchool & ([ldap:///]+user/entryDN+[?entryDN?base?%(filter)s])/ucsschoolSchool', filter=TEACHER_ADMIN_STAFF), 'write'),
		else_zero_break
	]
)

# old rule for unmigrated systems
print AccessRule(
	dn='^uid=([^,]+),cn=%(PUPILS)s,cn=users,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex',
	attrs='krb5KeyVersionNumber,krb5KDCFlags,krb5Key,krb5PasswordEnd,sambaAcctFlags,sambaPwdLastSet,sambaLMPassword,sambaNTPassword,shadowLastChange,shadowMax,userPassword,pwhistory,sambaPwdCanChange,sambaPwdMustChange,sambaPasswordHistory,sambaBadPasswordCount',
	by=[
		By(Who(dn='^uid=([^,]+),cn=(%(TEACHERS)s|%(TEACHERS-STAFF)s|%(STAFF)s|%(ADMINS)s),cn=users,ou=$2,%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex'), 'write'),
		else_zero_break
	]
)

print '# Lehrer, Mitarbeiter und OU-Admins duerfen Raum-Gruppen anlegen und bearbeiten'
print AccessRule(dn='^cn=raeume,cn=groups,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', attrs='children,entry', by=[
	By(filter_set('[$1] & ([ldap:///]+user/entryDN+[?entryDN?base?%(filter)s])/ucsschoolSchool', 'expand', filter=TEACHER_ADMIN_STAFF), 'write'),
	By(Who(dn='^uid=([^,]+),cn=(%(TEACHERS)s|%(TEACHERS-STAFF)s|%(STAFF)s|%(ADMINS)s),cn=users,ou=$1,%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex'), 'write'),  # old rule!
	else_zero_break,
])

print AccessRule(dn='^cn=([^,]+),cn=raeume,cn=groups,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', filter='(objectClass=univentionGroup)', blacklist=GROUP_BLACKLIST, by=[
	By(filter_set('[$2] & ([ldap:///]+user/entryDN+[?entryDN?base?%(filter)s])/ucsschoolSchool', 'expand', filter=TEACHER_ADMIN_STAFF), 'write'),
	By(Who(dn='^uid=([^,]+),cn=(%(TEACHERS)s|%(TEACHERS-STAFF)s|%(STAFF)s|%(ADMINS)s),cn=users,ou=$2,%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex'), 'write'),  # old rule!
	else_zero_break,
])

print '# Rechner duerfen ihr Passwort aendern'
# TODO: are the following attributes missing here?: 'sambaBadPasswordCount', 'krb5PasswordEnd', 'shadowMax', 'sambaAcctFlags', 'sambaPasswordHistory''
print AccessRule(dn='cn=.*,cn=server,cn=computers,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', attrs='userPassword,krb5Key,krb5KDCFlags,sambaNTPassword,sambaLMPassword,shadowLastChange,sambaPwdLastSet,pwhistory,krb5KeyVersionNumber,sambaPwdCanChange,sambaPwdMustChange', by=[By('self', 'write'), else_zero_break,])

print '# OU-Admins duerfen Passwoerter unterhalb von ...,cn=users,ou=... aendern'
print AccessRule(dn='^uid=(.+),cn=users,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', attrs='krb5KeyVersionNumber,krb5KDCFlags,krb5Key,krb5PasswordEnd,sambaAcctFlags,sambaPwdLastSet,sambaLMPassword,sambaNTPassword,shadowLastChange,shadowMax,userPassword,pwhistory,sambaPwdCanChange,sambaPwdMustChange,sambaPasswordHistory,sambaBadPasswordCount', by=[
	ou_group_admins(2),
	else_zero_break,
])

print '# OU-Admins duerfen Passwoerter von Schülern, Lehrern und Mitarbeitern (mit Position ausserhalb der OU) aendern'
print AccessRule(filter="(|(objectClass=ucsschoolTeacher)(objectClass=ucsschoolStudent)(objectClass=ucsschoolStaff))", attrs='krb5KeyVersionNumber,krb5KDCFlags,krb5Key,krb5PasswordEnd,sambaAcctFlags,sambaPwdLastSet,sambaLMPassword,sambaNTPassword,shadowLastChange,shadowMax,userPassword,pwhistory,sambaPwdCanChange,sambaPwdMustChange,sambaPasswordHistory,sambaBadPasswordCount', by=[
	By(filter_set('this/ucsschoolSchool & ([ldap:///%(ldap/base)s?entryDN?sub?%(filter)s]+user/entryDN+[%%29])/ucsschoolSchool', filter='(&(objectClass=ucsschoolAdministratorGroup)(uniqueMember='), 'write'),
	else_zero_break,
])

print '# Lehrer, Mitarbeiter und OU-Admins duerfen Arbeitsgruppen anlegen und aendern'
print AccessRule(dn='^(cn=%(TEACHERS)s,|cn=%(PUPILS)s,|)cn=groups,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', attrs='children,entry', by=[
	ou_group_admins(2),
	By(filter_set('[$2] & ([ldap:///]+user/entryDN+[?entryDN?base?%(filter)s])/ucsschoolSchool', 'expand', filter=TEACHER_ADMIN_STAFF), 'write'),
	By(Who(dn='^uid=([^,]+),cn=(%(TEACHERS)s|%(TEACHERS-STAFF)s),cn=users,ou=$2,%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex'), 'write'),  # old rule!
	else_zero_break,
])

print AccessRule(dn="^cn=([^,]+),(cn=%(TEACHERS)s,|cn=%(PUPILS)s,|)cn=groups,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$" % replacements, dnstyle='regex', filter="(objectClass=univentionGroup)", blacklist=GROUP_BLACKLIST, by=[
	ou_group_admins(3),
	By(filter_set('[$3] & ([ldap:///]+user/entryDN+[?entryDN?base?%(filter)s])/ucsschoolSchool', 'expand', filter=TEACHER_ADMIN_STAFF), 'write'),
	By(Who(dn='^uid=([^,]+),cn=(%(TEACHERS)s|%(TEACHERS-STAFF)s|%(STAFF)s|%(ADMINS)s),cn=users,ou=$3,%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex'), 'write'),  # old rule!
	else_zero_break,
])

print '# Lehrer, Mitarbeiter und OU-Admins duerfen Shares anlegen, Klassenshares aber nicht aendern'
print AccessRule(dn="^cn=shares,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$" % replacements, dnstyle='regex', attrs='children,entry', by=[
	ou_group_admins(1),
	By(filter_set('[$1] & ([ldap:///]+user/entryDN+[?entryDN?base?%(filter)s])/ucsschoolSchool', 'expand', filter=TEACHER_ADMIN), 'write'),
	By(Who(dn='^uid=([^,]+),cn=(%(TEACHERS)s|%(TEACHERS-STAFF)s),cn=users,ou=$1,%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex'), 'write'),  # old rule!
	else_zero_break,
])

print AccessRule(dn='^cn=([^,]+),cn=shares,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', filter="(objectClass=univentionShare)", blacklist=SHARE_BLACKLIST, by=[
	ou_group_admins(2),
	By(filter_set('[$2] & ([ldap:///]+user/entryDN+[?entryDN?base?%(filter)s])/ucsschoolSchool', 'expand', filter=TEACHER_ADMIN), 'write'),
	By(Who(dn='^uid=([^,]+),cn=(%(TEACHERS)s|%(TEACHERS-STAFF)s),cn=users,ou=$2,%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex'), 'write'),  # old rule!
	else_zero_break,
])

print '# Lehrer, Mitarbeiter und OU-Admins muessen einige temporaere Objekte schreiben duerfen'
print '# da keine regulaeren Ausdruecke auf Gruppenmitgliedschaften moeglich sind wird dies allen Lehrern erlaubt'
print AccessRule(dn='^cn=([^,]+),cn=(groupName|sid|gid|gidNumber|mac|uidNumber),cn=temporary,cn=univention,%(ldap/base)s$$', dnstyle='regex', filter="objectClass=lock", attrs='entry,@univentionObject,@lock', by=[
	By(filter_set('([ldap:///]+user/entryDN+[?entryDN?base?%(filter)s])/ucsschoolSchool', filter=TEACHER_ADMIN_STAFF), 'write'),
	By(Who(dn='^uid=([^,]+),cn=(%(TEACHERS)s|%(TEACHERS-STAFF)s|%(STAFF)s|%(ADMINS)s),cn=users,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex'), 'write'),  # old rule!
	else_zero_break,
])

print AccessRule(dn='^cn=(groupName|sid|gid|gidNumber|mac|uidNumber),cn=temporary,cn=univention,%(ldap/base)s$$', dnstyle='regex', attrs='children,entry', by=[
	By(filter_set('([ldap:///]+user/entryDN+[?entryDN?base?%(filter)s])/ucsschoolSchool', filter=TEACHER_ADMIN_STAFF), 'write'),
	By(Who(dn='^uid=([^,]+),cn=(%(TEACHERS)s|%(TEACHERS-STAFF)s|%(STAFF)s|%(ADMINS)s),cn=users,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex'), 'write'),  # old rule!
	else_zero_break,
])

print AccessRule(dn="cn=gidNumber,cn=temporary,cn=univention,%(ldap/base)s", attrs='univentionLastUsedValue', by=[
	By(filter_set('([ldap:///]+user/entryDN+[?entryDN?base?%(filter)s])/ucsschoolSchool', filter=TEACHER_ADMIN_STAFF), 'write'),
	By(Who(dn='^uid=([^,]+),cn=(%(TEACHERS)s|%(TEACHERS-STAFF)s|%(STAFF)s|%(ADMINS)s),cn=users,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex'), 'write'),  # old rule!
	else_zero_break,
])

print AccessRule(dn="cn=uidNumber,cn=temporary,cn=univention,%(ldap/base)s", attrs='univentionLastUsedValue', by=[
	By(filter_set('([ldap:///]+user/entryDN+[?entryDN?base?%(filter)s])/ucsschoolSchool', filter=TEACHER_ADMIN_STAFF), 'write'),
	By(Who(dn='^uid=([^,]+),cn=(%(TEACHERS)s|%(TEACHERS-STAFF)s|%(STAFF)s|%(ADMINS)s),cn=users,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex'), 'write'),  # old rule!
	else_zero_break,
])

print '# OU-Admins duerfen MAC-Adressen im Rechner- und DHCP-Objekt aendern'
print AccessRule(dn='^cn=([^,]+),cn=computers,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', attrs='macAddress', by=[
	ou_group_admins(2),
	else_zero_break,
])

print AccessRule(dn='^cn=([^,]+),cn=dhcp,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', attrs='entry,children,@univentionObject,@univentionPolicyReference,%s' % ','.join('!%s' % x for x in DHCPSERVICE_BLACKLIST), blacklist=DHCPSERVICE_BLACKLIST, by=[
	ou_group_admins(2),
	else_zero_break,
])
print AccessRule(dn='^cn=([^,]+),cn=([^,]+),cn=dhcp,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', attrs='entry,@univentionObject,@univentionPolicyReference,%s'  % ','.join('!%s' % x for x in DHCP_BLACKLIST), blacklist=DHCP_BLACKLIST, by=[
	ou_group_admins(3),
	else_zero_break,
])

print '# OU-Admins duerfen den DC-Slave und Memberserver joinen (benoetigt Passwortaenderung)'
print AccessRule(dn='^cn=.*,cn=server,cn=computers,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', attrs='krb5KeyVersionNumber,krb5KDCFlags,krb5Key,krb5PasswordEnd,sambaAcctFlags,sambaPwdLastSet,sambaLMPassword,sambaNTPassword,shadowLastChange,shadowMax,userPassword,pwhistory,sambaPwdCanChange,sambaPwdMustChange,sambaPasswordHistory,sambaBadPasswordCount', by=[
	ou_group_admins(1),
	else_zero_break,
])

print AccessRule(dn='^zoneName=[^,]+,cn=dns,%(ldap/base)s$$', dnstyle='regex', attrs='sOARecord', by=[
	By(Who(dn='^uid=([^,]+),cn=%(ADMINS)s,cn=users,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex'), 'write'),
	else_zero_break,
])

print '# domaincontroller slaves and memberservers of management group are not allowed to replicate pupils and teachers'
print AccessRule(dn='^.+,cn=(%(TEACHERS)s|%(PUPILS)s),cn=users,ou=[^,]+,%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', by=school_group_administrative_none)
print AccessRule(filter="(|(objectClass=ucsschoolStudent)(&(objectClass=ucsschoolTeacher)(!(objectClass=ucsschoolStaff))))", by=school_group_administrative_none)


print '# domaincontroller slaves and memberservers of educational group are not allowed to replicate staff users'
print AccessRule(dn='^.+,cn=%(STAFF)s,cn=users,ou=[^,]+,%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', by=school_group_educational_none)
print AccessRule(filter="(&(objectClass=ucsschoolStaff)(!(objectClass=ucsschoolTeacher))(!(objectClass=ucsschoolAdministrator)))", by=school_group_educational_none)

# FIXME: this rule allows to read all passwords underneath of all OU's instead of only the password belonging to the OU; explain why or fix it
# TODO: are the following attributes missing here?: 'sambaBadPasswordCount', 'krb5PasswordEnd', 'shadowMax', 'sambaAcctFlags', 'sambaPasswordHistory'
print '# Memberserver duerfen Passwoerter aller Objekte unterhalb einer Schule lesen'
print AccessRule(dn='^(.+,)?ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', attrs='userPassword,krb5Key,krb5KDCFlags,sambaNTPassword,sambaLMPassword,shadowLastChange,sambaPwdLastSet,pwhistory,krb5KeyVersionNumber,sambaPwdCanChange,sambaPwdMustChange', by=[
	By(member_administrative_group(), '+rscxd'),
	By(member_educational_group(), '+rscxd'),
	else_zero_break,
])

print '# Alle DC-Slaves muessen alle Benutzercontainer und Gruppen jeder Schule lesen koennen'
print AccessRule(dn='^ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', filter="objectClass=ucsschoolOrganizationalUnit", attrs='entry,%(SCHOOLOUATTRS)s' % replacements, by=[
	By(dc_administrative_group(1), 'write'),
	By(dc_educational_group(1), 'write'),
	By(Who(dn='^cn=.*,cn=server,cn=computers,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex'), '+rscxd'),
	else_zero_break,
])

print AccessRule(dn='^cn=(users|groups|%(EXAM)s),ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', attrs=['entry', 'children'], blacklist=CONTAINER_BLACKLIST, by=[
	By(dc_administrative_group(2), 'write'),
	By(dc_educational_group(2), 'write'),
	By(Who(dn='^cn=.*,cn=server,cn=computers,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex'), '+rscxd'),
	else_zero_break,
])

print AccessRule(dn='^([^,]+),cn=groups,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', blacklist=GROUP_BLACKLIST, by=[
	By(dc_administrative_group(2), 'write'),
	By(dc_educational_group(2), 'write'),
	By(Who(dn='^cn=.*,cn=server,cn=computers,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex'), '+rscxd'),
	else_zero_break,
])

print AccessRule(dn='^cn=(%(PUPILS)s|%(TEACHERS)s|%(TEACHERS-STAFF)s|%(STAFF)s|%(ADMINS)s),cn=users,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', attrs=['entry', 'children'], blacklist=CONTAINER_BLACKLIST, by=[
	By(dc_administrative_group(2), 'write'),
	By(dc_educational_group(2), 'write'),
	By(Who(dn='^cn=.*,cn=server,cn=computers,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex'), '+rscxd'),
	else_zero_break,
])

print '# DC-Slaves muessen die Benutzer ihrer Schule lesen und schreiben duerfen'
print AccessRule(dn='^uid=([^,]+),cn=(%(PUPILS)s|%(TEACHERS)s|%(TEACHERS-STAFF)s|%(STAFF)s|%(ADMINS)s),cn=users,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', blacklist=USER_BLACKLIST, by=[
	By(Set('([cn=OU]+this/ucsschoolSchool+[-DC-Edukativnetz,cn=ucsschool,cn=groups,%(ldap/base)s])/uniqueMember & user' % configRegistry), 'write'),
	else_zero_break,
])
print AccessRule(dn='^uid=([^,]+),cn=%(EXAM)s,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', blacklist=USER_BLACKLIST, by=[
	By(Set('([cn=OU]+this/ucsschoolSchool+[-DC-Edukativnetz,cn=ucsschool,cn=groups,%(ldap/base)s])/uniqueMember & user' % configRegistry), 'write'),
	else_zero_break,
])

print '# Schul-Slave-Server duerfen nur Eintraege ihrer OU lesen und schreiben (Passwortaenderungen etc.)'
print '# Lehrer und Memberserver duerfen sie lesen, ou-eigene bekommen Standard-ACLs, ou-fremde Server/user duerfen nichts'
print AccessRule(dn='^(.+,)?ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', by=[
	By(filter_set('[ldap:///ou=$2,%(ldap/base)s?ou?base?%(filter)s]/ou', 'expand', filter='(!(objectClass=ucsschoolOrganizationalUnit))'), '+0', 'break'),
	By(dc_administrative_group(2), 'write'),
	By(dc_educational_group(2), 'write'),
	By(Group('ou=$2,%(DISTRICT)s%%(ldap/base)s' % replacements, groupstyle='expand', objectclass='univentionLDAPACL', attrname='univentionLDAPAccessWrite'), 'write'),
	By(Who(dn='^uid=([^,]+),cn=(%(TEACHERS)s|%(TEACHERS-STAFF)s|%(STAFF)s|%(ADMINS)s),cn=users,ou=$2,%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex'), '+rscxd', 'continue'),
	By(filter_set('[$2] & ([ldap:///]+user/entryDN+[?entryDN?base?%(filter)s])/ucsschoolSchool', 'expand', filter=TEACHER_ADMIN_STAFF), '+rscxd', 'continue'),
	By(dc_administrative_group(), '+0', STOP),
	By(dc_educational_group(), '+0', STOP),
	By(filter_set('([ldap:///]+user/entryDN+[?entryDN?base?%(filter)s])/ucsschoolSchool', 'expand', filter=TEACHER_ADMIN_STAFF), '+0', STOP),
	By(Who(dn='^.*,ou=$2,%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex'), '+rscxd', 'break'),
	By(Who(dn='^.*,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex'), '+0', STOP),
	else_zero_break,
])

print '# Slave-Controller duerfen Klassen-Gruppen bearbeiten (AUSNAHME! Wird fuer Lehrerzuordnung in UMC benoetigt!)'
print AccessRule(dn='^cn=klassen,cn=%(PUPILS)s,cn=groups,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', attrs='children,entry', by=[
	By(dc_administrative_group(1), 'write'),
	By(dc_educational_group(1), 'write'),
	else_zero_break,
])

print AccessRule(dn='^cn=([^,]+),cn=klassen,cn=%(PUPILS)s,cn=groups,ou=([^,]+),%(DISTRICT)s%%(ldap/base)s$$' % replacements, dnstyle='regex', filter="(objectClass=univentionGroup)", blacklist=GROUP_BLACKLIST, by=[
	By(dc_administrative_group(2), 'write'),
	By(dc_educational_group(2), 'write'),
	else_zero_break,
])

print '# Schulserver duerfen die Passwoerter aller globalen Objekte replizieren'
print AccessRule(dn='^(.+,)?cn=(users|kerberos|computers),%(ldap/base)s$$', dnstyle='regex', by=[
	By(dc_administrative_group(), '+rscxd'),
	By(member_administrative_group(), '+rscxd'),
	By(dc_educational_group(), '+rscxd'),
	By(member_educational_group(), '+rscxd'),
	else_zero_break,
])

print '# end 65ucsschool'
@!@
