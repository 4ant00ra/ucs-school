#!/usr/bin/python2.6
# -*- coding: utf-8 -*-
#
# Univention Management Console
#  UMC web server
#
# Copyright 2011 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import cherrypy
import os
import threading
import Queue
from optparse import OptionParser
import simplejson
import signal
import sys
import tempfile
import time
import threading
import uuid
import httplib

import notifier
from daemon.runner import DaemonRunner, DaemonRunnerStopFailureError, DaemonRunnerStartFailureError

import univention.management.console.protocol as umcp
from univention.management.console.log import *
import univention.config_registry as ucr

TEMPDIR = '/var/tmp/univention-management-console-frontend'

configRegistry = ucr.ConfigRegistry()
configRegistry.load()

# global objects
try:
	_session_timeout = int( configRegistry.get( 'umc/http/session/timeout', 300 ) )
except TypeError, ValueError:
	CORE.process( 'Failed to read session timeout from UCR variable umc/http/session/timeout. Using default of 300 seconds' )
	_session_timeout = 300
_thread_http = None

class SessionClient(object):
	def __init__( self, timeout = 300 ):
		CORE.info('SessionClient(0x%x): creating new session' % (id(self),))
		self.client = umcp.Client()
		self.client.signal_connect( 'authenticated', self._authenticated )
		self.client.signal_connect( 'response', self._response )
		if self.client.connect():
			CORE.info('SessionClient(0x%x): connected to UMC server' % (id(self),))
		else:
			CORE.process('SessionClient(0x%x): connection to UMC server failed' % (id(self),))
		self._auth_response = None
		self._auth_response_queue = None
		self._requestid2response_queue = {}
		self._timeout = timeout
		self._time_remaining = timeout
		self._timer()  # launch the timer
		self._lock = threading.Lock()

	def renew_timer( self ):
		"""Refresh the remaining time the session is will be held open."""
		self._time_remaining = self._timeout

	def _timer( self ):
		"""In order to avoid problems when the system time is changed (e.g.,
		via rdate), we register a timer event that counts down the session
		timeout second-wise."""
		# count down the remaining time
		self._time_remaining -= 1

		if self._time_remaining <= 0:
			# session has timed out
			self._timed_out()
		else:
			# count down the timer second-wise (in order to avoid problems when
			# changing the system time, e.g. via rdate)
			notifier.timer_add( 1000 , self._timer )

	def _timed_out( self ):
		"""Timer event: the session has expired and therefor the
		connection to the UMC server is closed as long as there are no
		open requests."""
		CORE.info('SessionClient(0x%x): timed out!' % (id(self),))
		if self._requestid2response_queue:
			CORE.info('SessionClient(0x%x): There are open requests (%s). Postpone session shutdown' % (id(self), ','.join( self._requestid2response_queue.keys())))
			self._timeout = 0 # wait until all requests are answered
		else:
			CORE.info('SessionClient(0x%x): Closing connection to UMC server' % (id(self),))
			self.client.disconnect()
		return False

	def _authenticated(self, success, status, message):
		"""Callback function for 'authenticated' from UMCP-Server."""
		CORE.process('SessionClient(0x%x): _authenticated: success=%s  status=%s  message=%s' % (id(self), success, status, message))
		self._auth_response.status = status
		self._auth_response_queue.put( self._auth_response )
		# release queue object
		self._auth_response_queue = None

	def authenticate_user(self, request, response_queue):
		"""Send authentication request to UMC server."""
		CORE.info('SessionClient(0x%x): authenticate_user: sending authentication request for user %s' % (id(self), request.body['username']))
		self._auth_response = umcp.Response( request )
		self._auth_response.body['sessionid'] = request.body.get('sessionid','')
		self._auth_response_queue = response_queue
		self.client.authenticate( request.body[ 'username' ], request.body[ 'password' ] )

	def _response(self, response):
		"""Queue response from UMC server."""
		self._lock.acquire()
		try:
			try:
				# get and remove queue for response
				queue = self._requestid2response_queue.pop(response.id)
			except KeyError:
				CORE.process('SessionClient(0x%x): no request(%s) found: status=%s' % (id(self), response.id, response.status))
			else:
				CORE.info('SessionClient(0x%x): got response(%s): status=%s queue=0x%x' % (id(self), response.id, response.status, id(queue)))
				queue.put(response)
		finally:
			self._lock.release()

		# shutdown connection when the session is expired and there are no open requests
		if self._timeout == 0 and not self._requestid2response_queue:
			self.client.disconnect()

	def send_request(self, request, response_queue):
		"""Send request to UMC server."""
		CORE.info('SessionClient(0x%x): sending request(%s)' % (id(self), request.id))
		self._lock.acquire()
		try:
			self._requestid2response_queue[request.id] = response_queue
		finally:
			self._lock.release()
		self.client.request( request )
		self.renew_timer()

	def cleanup_request(self, request):
		"""Remove request from mapping."""
		self._lock.acquire()
		try:
			del self._requestid2response_queue[request.id]
		finally:
			self._lock.release()


class UMCP_Dispatcher( object ):
	"""Dispatcher used to exchange the requests between CherryPy and UMC"""
	sessions = {}
	_queue_send = Queue.Queue()

	@classmethod
	def check_queue(cls):
		while True:
			try:
				queuerequest = cls._queue_send.get_nowait()
			except Queue.Empty:
				# Queue is empty - nothing to do (for now)
				return True
			CORE.info('UMCP_Dispatcher: check_queue: new request: 0x%x' % (id(queuerequest),))

			if not isinstance(queuerequest.sessionid, basestring) and queuerequest.sessionid is not None:
				CORE.process('UMCP_Dispatcher: check_queue: got invalid sessionid: %r' % (queuerequest.sessionid,))
			if not isinstance(queuerequest.request, umcp.Request):
				CORE.process('UMCP_Dispatcher: check_queue: got invalid UMCP request: %r' % (queuerequest.request,))
			if not isinstance(queuerequest.response_queue, Queue.Queue):
				CORE.process('UMCP_Dispatcher: check_queue: got invalid response_queue: %r' % (queuerequest.response_queue,))

			# stop here if sessionid is missing or unknown and request is no AUTH request
			try:
				client = cls.sessions[queuerequest.sessionid]
			except KeyError:
				if queuerequest.request.command != 'AUTH':
					CORE.process('UMCP_Dispatcher: check_queue: invalid session: sessionid=%s' % repr(queuerequest.sessionid))
					response = umcp.Response( queuerequest.request )
					response.status = httplib.UNAUTHORIZED # set status to unauthorized
					queuerequest.response_queue.put( response )
					continue # with next request

			if queuerequest.request.command == 'AUTH':
				# AUTH request
				CORE.info('UMCP_Dispatcher: check_queue: AUTH request')
				if not queuerequest.sessionid:
					CORE.info('UMCP_Dispatcher: check_queue: creating new sessionid')
					# FIXME: create nice session id via uuid or something else
					queuerequest.sessionid = str( uuid.uuid4() )
				# create new session / umcp client
				# add a small offset to the timeout in order to avoid a mismatch between frontend and backend
				client = SessionClient(timeout = _session_timeout + 5)
				cls.sessions[queuerequest.sessionid] = client
				callback = notifier.Callback(cls.cleanup_session, queuerequest.sessionid)
				client.client.signal_connect( 'closed', callback )

				# save new sessionid in UMCP request so it can be returned after authentication
				queuerequest.request.body['sessionid'] = queuerequest.sessionid
				client.authenticate_user( queuerequest.request, queuerequest.response_queue )
			else:
				# COMMAND / GET / SET request
				CORE.info('UMCP_Dispatcher: check_queue: normal request')
				try:
					client.send_request( queuerequest.request, queuerequest.response_queue )
				except umcp.client.NotAuthenticatedError:
					response = umcp.Response( queuerequest.request )
					response.status = httplib.UNAUTHORIZED # set status to unauthorized
					queuerequest.response_queue.put( response )
					# remove response_queue from internal mapping
					client.cleanup_request( queuerequest.request )

	@classmethod
	def cleanup_session(cls, sessionid):
		"""Removes a session when the connection to the UMC server has died or the session is expired"""
		CORE.info('Open sessions: %s' % (','.join(cls.sessions.keys())))
		try:
			del cls.sessions[sessionid]
			CORE.info('Cleaning up session %s' % sessionid)
		except KeyError, e:
			CORE.info( 'Session %s not found' % sessionid )

class UploadManager( dict ):
	def add( self, request_id, store ):
		tmpfile = tempfile.NamedTemporaryFile( prefix = request_id, dir = TEMPDIR, delete = False )
		if hasattr(store, 'file') and store.file is None:
			tmpfile.write( store.value )
		else:
			tmpfile.write( store.file.read() )
		tmpfile.close()
		if request_id in self:
			self[ request_id ].append( tmpfile.name )
		else:
			self[ request_id ] = [ tmpfile.name ]

		return tmpfile.name

	def cleanup( self, request_id ):
		if request_id in self:
			filenames = self[ request_id ]
			for filename in filenames:
				if os.path.isfile( filename ):
					os.unlink( filename )
			del self[ request_id ]
			return True

		return False

_upload_manager = UploadManager()

class QueueRequest(object):
	"""Element for the request queue containing the assoziated session
	ID, the request object and a response queue."""
	def __init__(self, sessionid, request, response_queue):
		self.sessionid = sessionid
		self.request = request
		self.response_queue = response_queue

def update_session_cookie(cookiejar, sessionid):
	"""Defines a new cookie for the given session ID."""
	cookiejar['UMCSessionId'] = sessionid
	cookiejar['UMCSessionId']['max-age'] = _session_timeout
	cookiejar['UMCSessionId']['version'] = 1
	cookiejar['UMCSessionId']['path'] = '/'

class CPgeneric(object):

	# NOTE: only use CORE.process, _not_ CORE.error; since CORE.error writes as
	#       well to /var/log/syslog, this seems to cause problems with cherrypy.
	#       (Bug #22634)
	_logOptions = {
		'error': CORE.process,
		'warn': CORE.warn,
		'info': CORE.info,
	}

	@property
	def name( self ):
		"""returns class name"""
		return self.__class__.__name__

	def _log(self, loglevel, _msg):
		remote = cherrypy.request.remote
		msg = '%s (%s:%s) %s' % (self.name,  remote.ip, remote.port, _msg)
		self._logOptions.get(loglevel, CORE.info)(msg)

	def get_request(self, request, json):
		req = umcp.Request( [ 'generic' ], opts = {} )
		return req

	@cherrypy.expose
	def default( self, *args, **kwargs ):
		remote = cherrypy.request.remote
		self._log('info', 'got new request')

		# check for a valid session key
		cookie = cherrypy.request.cookie
		if cookie.get('UMCSessionId'):
			sessionid = cookie['UMCSessionId'].value
			self._log('info', 'found sessionid')
			self._log(99, 'sessionid="%s"' % (sessionid))
		else:
			# a sessionid is required to use this command
			self._log('info', 'no sessionid found')
			raise cherrypy.HTTPError(httplib.UNAUTHORIZED)

		req = None

		iframe = False
		if cherrypy.request.headers.get( 'Content-Type', '' ).startswith( 'multipart/form-data' ): # upload
			if not cherrypy.request.path_info.startswith( '/upload' ):
				raise cherrypy.HTTPError(httplib.BAD_REQUEST, 'Content type and URL do not match')
			json = kwargs.values()
			iframe = 'iframe' in kwargs and (kwargs['iframe'] not in ('false', False, 0, '0'))
		elif cherrypy.request.headers.get( 'Content-Type', '' ).startswith( 'application/json' ): # normal request
			if not cherrypy.request.headers.get(u"Content-Length", u""):
				json = ''
				self._log('warn', 'missing Content-Length header')
			else:
				# get body and parse json
				body = ''
				if cherrypy.request.body:
					body = cherrypy.request.body.read()

				try:
					json = simplejson.loads(body)
				except ValueError:
					self._log('error', 'cannot parse JSON body')
					raise cherrypy.HTTPError(httplib.BAD_REQUEST, 'Invalid JSON document')

		# create new UMCP request
		req = self.get_request( cherrypy.request, json )

		# create new response queue
		response_queue = Queue.Queue()

		# send request to UMC server
		request = QueueRequest(sessionid, req, response_queue)
		UMCP_Dispatcher._queue_send.put(request)

		self._log('info', 'pushed request(0x%x) to queue(0x%x) - waiting for response (sessionid="%s")' % (id(req), id(response_queue), sessionid))
		response = response_queue.get()
		self._log('info', 'got response(0x%x) from queue(0x%x): status=%s (sessionid="%s")' % (id(response), id(response_queue), response.status, sessionid))

		if response.status == umcp.SUCCESS:
			update_session_cookie(cherrypy.response.cookie, sessionid)
			if iframe:
				# this is a workaround to make iframe uploads work, they need the textarea field
				return '<html><body><textarea>' + simplejson.dumps(response.body) + '</textarea></body></html>'
			else:
				return simplejson.dumps(response.body)

		# something bad happened
		self._log('error', 'response status code: %s' % response.status)
		self._log('error', 'response message: %s' % response.message)
		message = response.message
		if isinstance(message, basestring):
			message = message.replace('"', "'")
		raise cherrypy.HTTPError(response.status, message)


class CPGet(CPgeneric):
	requestprefix = '/get'

	def get_request(self, request, json):
		args = request.path_info

		if args.startswith( self.requestprefix ):
			args = args[ len(self.requestprefix)+1 : ]

		if not args:
			self._log('error', 'get_request: args is empty')
			raise cherrypy.HTTPError(httplib.NOT_FOUND)

		req = umcp.Request( 'GET', arguments = [ args ], options = json.get( 'options', {} ) )

		return req


class CPSet(CPgeneric):
	requestprefix = '/set'

	def get_request(self, request, json):
		return umcp.Request( 'SET', options = json.get( 'options', {} ) )


class CPUpload( CPgeneric ):
	requestprefix = '/upload'

	def get_request(self, request, storages ):
		self._log( 'info', 'Handle upload command' )
		global _upload_manager
		custom_command = request.path_info[ len( self.requestprefix ) + 1 : ]
		if custom_command:
			self._log( 'info', 'Send upload to module function' )
			req = umcp.Request( 'COMMAND', arguments = [ custom_command ] )
		else:
			req = umcp.Request( 'UPLOAD' )

		options = []
		for store in storages:
			if isinstance(store, cherrypy._cpcgifs.FieldStorage):
				tmpfile = _upload_manager.add( req.id, store )
				options.append( { 'filename' : store.filename, 'name' : store.name, 'tmpfile' : tmpfile } )

		req.options = options
		return req


class CPCommand(CPgeneric):
	requestprefix = '/command'

	def get_request(self, request, json):
		args = request.path_info

		if args.startswith( self.requestprefix ):
			args = args[ len(self.requestprefix)+1 : ]

		if not args:
			self._log('error', 'get_request: args is empty')
			raise cherrypy.HTTPError(httplib.NOT_FOUND)

		req = umcp.Command( [ args ], options = json.get( 'options', {} ) )
		if 'flavor' in json:
			req.flavor = json[ 'flavor' ]

		return req


class CPAuth(object):
	@cherrypy.expose
	def default(self):
		remote = cherrypy.request.remote
		CORE.info('CPRoot/auth: got new auth request (%s:%s <=> %s)' % (remote.ip, remote.port, remote.name))

		if not cherrypy.request.headers.get(u"Content-Length", u""):
			CORE.process('CPRoot/auth: missing Content-Length header')
			raise cherrypy.HTTPError(httplib.LENGTH_REQUIRED)

		# TODO FIXME check body length and stop here if too much data has been sent by client

		# get body and parse json
		body = ''
		if cherrypy.request.body:
			body = cherrypy.request.body.read()

		try:
			json = simplejson.loads(body)
		except ValueError:
			CORE.process('CPRoot/auth: cannot parse JSON body')
			raise cherrypy.HTTPError(httplib.BAD_REQUEST, 'Invalid JSON document')

		CORE.info('CPRoot/command: request: command=%s' % cherrypy.request.path_info )

		# create new UMCP request
		req = umcp.Request( 'AUTH' )
		req.body[ 'username' ] = json[ 'options' ].get('username','')
		req.body[ 'password' ] = json[ 'options' ].get('password','')

		# create new response queue
		response_queue = Queue.Queue()

		# send request to UMC server
		request = QueueRequest(None, req, response_queue)
		UMCP_Dispatcher._queue_send.put(request)

		CORE.info('CPRoot/auth: pushed request to queue - waiting for response')
		response = response_queue.get()
		CORE.info('CPRoot/auth: got response with status %s' % response.status)

		if response.status == umcp.SUCCESS and response.body.get('sessionid'):
			CORE.info('CPRoot/auth: creating cookie with sessionid=%s' % response.body.get('sessionid'))
			update_session_cookie(cherrypy.response.cookie, response.body['sessionid'])
			return ""

		CORE.process('CPRoot/auth: username: %s, status code: %s' % (json.get('username'), response.status))
		message = response.message
		if isinstance(message, basestring):
			message = message.replace('"', "'")
		raise cherrypy.HTTPError(response.status, message)

class CPRoot(object):
	def index(self):
		"""
		http://localhost:<ucr:umc/http/port>/
		"""
		raise cherrypy.HTTPError(httplib.NOT_FOUND)
	index.exposed = True

def run_cherrypy():
	# TODO FIXME Folgenden Configeintrag einbauen, wenn loglevel in (0,1,2)
	# 'server.environment': 'production',
	cherrypy.config.update( {
		'server.socket_port': int( configRegistry.get( 'umc/http/port', 8090 ) ),
		'server.socket_host': '::',
		'server.request_queue_size' : 100,
		'engine.autoreload_on': False,
	} )
	cherrypy.tools.proxy(base=None, local='X-Forwarded-Host', remote='X-Forwarded-For', scheme='X-Forwarded-Proto')

	# modify the template for HTTP errors to return errors in JSON format
	cherrypy._cperror._HTTPErrorTemplate = '{ "status": "%(status)s", "message": "%(message)s" }'

	root = CPRoot()
	root.command = CPCommand()
	root.auth = CPAuth()
	root.get = CPGet()
	root.set = CPSet()
	root.upload = CPUpload()

	cherrypy.quickstart(root=root)


class UMC_HTTP_Daemon(DaemonRunner):
	def __init__( self ):
		self.parser = OptionParser()
		self.parser.add_option( '-n', '--no-daemon', action = 'store_false',
						   dest = 'daemon_mode', default = True,
						   help = 'if set the process will not fork into the background' )
		try:
			default_debug = int( configRegistry.get( 'umc/server/debug/level', '1' ) )
		except:
			default_debug = 1
		self.parser.add_option( '-d', '--debug', action = 'store', type = 'int', dest = 'debug', default = default_debug,
						   help = 'if given than debugging is activated and set to the specified level [default: %default]' )
		self.parser.add_option( '-L', '--log-file', action = 'store',  dest = 'logfile', default = 'management-console-web-server',
						   help = 'specifies an alternative log file [default: %default]' )
		( self.options, self.arguments ) = self.parser.parse_args()

		# cleanup environment
		os.environ.clear() # supported since python 2.6
		os.environ[ 'PATH' ] = '/bin:/sbin:/usr/bin:/usr/sbin'

		# init logging
		if not self.options.daemon_mode:
			debug_fd = log_init( '/dev/stderr', self.options.debug )
		else:
			debug_fd = log_init( self.options.logfile, self.options.debug )

		# default action: start
		if not self.arguments:
			sys.argv[1:] = ['start']
		elif self.arguments:
			sys.argv[1:] = self.arguments

		# for daemon runner
		if self.options.daemon_mode:
			self.stdin_path = os.path.devnull
			self.stdout_path = os.path.devnull
			self.stderr_path = os.path.devnull
		else:
			self.stdin_path = '/dev/stdin'
			self.stdout_path = '/dev/stdout'
			self.stderr_path = '/dev/stderr'
		self.pidfile_path = '/var/run/umc-web-server.pid'
		self.pidfile_timeout = 10

		# init daemon runner
		DaemonRunner.__init__( self, self )
		self.daemon_context.detach_process = self.options.daemon_mode
		self.daemon_context.files_preserve = [ debug_fd ]

	def _restart( self ):
		"""Handler for the restart action. """
		if self.pidfile.is_locked():
			CORE.process( 'Stopping UMC web server ...' )
			self._stop()

		CORE.process( 'Starting UMC web server ...' )
		self._start()

	def _crestart( self ):
		"""Handler for the crestart action. """
		if not self.pidfile.is_locked():
			CORE.process( 'The UMC web server will not be restarted as it is not running currently' )
			return

		CORE.process( 'Stopping UMC web server ...' )
		self._stop()
		CORE.process( 'Starting UMC web server ...' )
		self._start()

	DaemonRunner.action_funcs[ 'restart' ] = _restart
	DaemonRunner.action_funcs[ 'crestart' ] = _crestart

	def _terminate_daemon_process( self ):
		""" Terminate the daemon process specified in the current PID file.
			"""
		pid = self.pidfile.read_pid()
		try:
			os.kill( pid, signal.SIGTERM )
		except OSError, exc:
			raise DaemonRunnerStopFailureError(	"Failed to terminate %(pid)d: %(exc)s" % vars() )

		if self.pidfile.is_locked():
			CORE.process( 'The UMC web server is still running. Will wait for 5 seconds' )
			count = 10
			while count:
				time.sleep( 0.5 )
				if not self.pidfile.is_locked():
					break
				count -= 1
			if self.pidfile.is_locked():
				CORE.process( 'The UMC web server is still running. Kill it!' )
				os.kill( pid, signal.SIGKILL )
				self.pidfile.break_lock()

	def _usage_exit( self, argv ):
		self.parser.error( 'invalid action' )
		sys.exit( 1 )

	def run(self):
		# start webserver as separate thread
		_thread_http = threading.Thread( target = run_cherrypy )
		_thread_http.deamon = True
		_thread_http.start()

		try:
			# start notifier loop
			notifier.init( notifier.GENERIC )
			notifier.dispatcher_add( UMCP_Dispatcher.check_queue )
			notifier.loop()
		except (SystemExit, KeyboardInterrupt), e:
			# stop the web server
			CORE.info('stopping cherrypy: %s' % str(e))
			cherrypy.engine.exit()
			CORE.info('cherrypy stopped')

if __name__ == '__main__':
	http_daemon = UMC_HTTP_Daemon()
	try:
		http_daemon.do_action()
	except DaemonRunnerStopFailureError, e:
		CORE.process( 'Failed to shutdown server gracefully (may be its already dead): %s' % str( e ) )
	except DaemonRunnerStartFailureError, e:
		CORE.process( 'Failed to start server: %s' % str( e ) )
