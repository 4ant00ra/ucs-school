<IfModule mod_ssl.c>
Listen 443
#
# Pseudo Random Number Generator (PRNG):
# Configure one or more sources to seed the PRNG of the SSL library.
# The seed data should be of good random quality.
# WARNING! On some platforms /dev/random blocks if not enough entropy
# is available. This means you then cannot use the /dev/random device
# because it would lead to very long connection times (as long as
# it requires to make more entropy available). But usually those
# platforms additionally provide a /dev/urandom device which doesn't
# block. So, if available, use this one instead. Read the mod_ssl User
# Manual for more details.
#
SSLRandomSeed startup builtin
SSLRandomSeed startup file:/dev/urandom 512
SSLRandomSeed connect builtin
SSLRandomSeed connect file:/dev/urandom 512

##
##  SSL Global Context
##
##  All SSL configuration in this context applies both to
##  the main server and all SSL-enabled virtual hosts.
##

#
#   Some MIME-types for downloading Certificates and CRLs
#
AddType application/x-x509-ca-cert .crt
AddType application/x-pkcs7-crl    .crl

#   Pass Phrase Dialog:
#   Configure the pass phrase gathering process.
#   The filtering dialog program (`builtin' is a internal
#   terminal dialog) has to provide the pass phrase on stdout.
SSLPassPhraseDialog  builtin

#   Inter-Process Session Cache:
#   Configure the SSL Session Cache: First the mechanism 
#   to use and second the expiring timeout (in seconds).
#SSLSessionCache         dbm:/var/run/apache2/ssl_scache
SSLSessionCache        shmcb:/var/run/apache2/ssl_scache(512000)
SSLSessionCacheTimeout  300

#   Semaphore:
#   Configure the path to the mutual exclusion semaphore the
#   SSL engine uses internally for inter-process synchronization. 
SSLMutex  file:/var/run/apache2/ssl_mutex

</IfModule>


@!@
active_interfaces = []
for i in range(0,4):
	if baseConfig.has_key('interfaces/eth%s/type' % i) and baseConfig['interfaces/eth%s/type' % i] == 'dhcp':
		continue
	if baseConfig.has_key('interfaces/eth%s/address' % i):
		active_interfaces.append(baseConfig['interfaces/eth%s/address' % i])
		
	for j in range(0,4):
		if baseConfig.has_key('interfaces/eth%s_%s/type' % (i,j)) and baseConfig['interfaces/eth%s_%s/type' % (i,j) ] == 'dhcp':
			continue
		if baseConfig.has_key('interfaces/eth%s_%s/address' % (i,j)):
			active_interfaces.append(baseConfig['interfaces/eth%s_%s/address' % (i,j)])
	
if len(active_interfaces) > 0:
	for n in active_interfaces:
		print 'NameVirtualHost %s:443' % n
	
	print '<VirtualHost ',
	for n in active_interfaces:
		print '%s:443' % n,
	print '>'
else:
	print 'NameVirtualHost *:443'
	print ''
	print '<VirtualHost *:443>'
@!@

<IfModule mod_ssl.c>
SSLEngine on
SSLCertificateFile /etc/univention/ssl/@%@hostname@%@.@%@domainname@%@/cert.pem
SSLCertificateKeyFile /etc/univention/ssl/@%@hostname@%@.@%@domainname@%@/private.key
#SetEnvIf User-Agent ".*MSIE.*" nokeepalive ssl-unclean-shutdown
</IfModule>

### To enable special log format for HTTPS-access
# LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\" %p" combinedssl
# CustomLog /var/log/apache2/access.log combinedssl	## with port number

RewriteEngine on
RewriteOptions Inherit

</VirtualHost>
