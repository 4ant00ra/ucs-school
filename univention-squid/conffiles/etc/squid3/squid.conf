@%@UCRWARNING=#@%@

include /etc/squid3/local.conf

access_log /var/log/squid3/access.log
cache_log /var/log/squid3/cache.log

cache_dir ufs /var/spool/squid3 256 16 256

@!@
if configRegistry['squid/debug/level']:
	print "debug_options %s" % ( configRegistry.get('squid/debug/level'))
@!@

# Recommended by Squid developers, causes the object to be handled directly
# by a cache 
hierarchy_stoplist cgi-bin ?

acl QUERY urlpath_regex cgi-bin \?
no_cache deny QUERY

# Adapted from squeeze default configuration
refresh_pattern ^ftp:		1440	20%	10080
refresh_pattern ^gopher:	1440	0%	1440
refresh_pattern -i (/cgi-bin/|\?) 0	0%	0
refresh_pattern .		0	20%	4320

acl manager proto cache_object
acl localhost src 127.0.0.1/32
acl to_localhost dst 127.0.0.0/8

@!@
myNetworks = {}
for key,value in configRegistry.items():
	if key.startswith('interfaces/eth'):
		interface = key.split("/")[1]
		network = configRegistry.get('interfaces/%s/network' % interface, "")
		netmask = configRegistry.get('interfaces/%s/netmask' % interface, "")
		address = configRegistry.get('interfaces/%s/address' % interface, "")

		if network and netmask and address:
			myNetworks[network] = netmask

if configRegistry.get( 'squid/cache', 'yes' ).lower() in ( 'no', 'false' ):
   print '''
cache deny all
cache_dir null /tmp
'''

if 'yes' in [ configRegistry.get('squid/virusscan', ''), configRegistry.get('squid/contentscan', '') ]:
   	# dansguardian runs on the default port in this case
	try:
	        squidport = int(configRegistry.get('squid/httpport', '3128'))+1
	        print "http_port %s" % squidport
	except:
   		print "http_port 3129"
else:
	transparent = ''
	if configRegistry.get('squid/transparentproxy','no').lower() in ['yes', 'true']:
		transparent = 'transparent'
	print "http_port %s %s" % ( configRegistry.get('squid/httpport', '3128'), transparent )

print ''

authentication = False
if configRegistry.is_true('squid/krb5auth'):
	authentication = True
	print 'auth_param negotiate program /usr/lib/squid3/squid_kerb_auth'
	print 'auth_param negotiate children %s' % configRegistry.get( 'squid/krb5auth/children', '10' )
	if not configRegistry.get('squid/krb5auth/keepalive', '').lower() in ['no', 'false']:
		print 'auth_param negotiate keep_alive on'

print ''

if configRegistry['squid/ldapauth'] == 'yes':
	authentication = True
	ldapAuth = 'auth_param basic program /usr/lib/squid3/squid_ldap_auth'
	ldapAuth += ' -h ' + configRegistry['ldap/server/name']
	ldapAuth += ' -p ' + configRegistry.get('ldap/server/port', '7389')
	ldapAuth += ' -b "' + configRegistry['ldap/base'] + '"'
	ldapAuth += ' -D "' + configRegistry['ldap/hostdn'] + '"'
	ldapAuth += ' -W /etc/squid3.secret'
	ldapAuth += ' -s sub'
	ldapAuth += ' -f "(&(objectClass=organizationalPerson)(uid=%s))"'
	print ldapAuth
	print 'auth_param basic children %s'  % configRegistry.get( 'squid/ldapauth/children', '5' )
	print 'auth_param basic realm Univention Proxy Server'
	print 'auth_param basic credentialsttl 2 hours'

print ''

if configRegistry['squid/ntlmauth'] == 'yes':
	authentication = True
	print 'auth_param ntlm program /usr/bin/ntlm_auth --helper-protocol=squid-2.5-ntlmssp'
	print 'auth_param ntlm children %s' % configRegistry.get( 'squid/ntlmauth/children', '10' )
	if not configRegistry.get('squid/ntlmauth/keepalive', '').lower() in ['no', 'false']:
		print 'auth_param ntlm keep_alive on'

print ''

if configRegistry['squid/basicauth'] == 'yes':
	authentication = True
	print 'auth_param basic program /usr/bin/ntlm_auth --helper-protocol=squid-2.5-basic'
	print 'auth_param basic children %s'  % configRegistry.get( 'squid/basicauth/children', '5' )
	print 'auth_param basic realm Univention Proxy Server'
	print 'auth_param basic credentialsttl 2 hours'

for port in configRegistry.get('squid/webports', '80 443 21').split(" "):
	print "acl web_ports port %s" % port
print 'http_access deny !web_ports'

if authentication:

	# groups
	if configRegistry.is_true("squid/auth/groups", True):
		print "# Allow access based on ldap group membership"
		groups = configRegistry.get('squid/ldapauth/groups', 'www-access')
		groupString=""
		for group in groups.split(';'):
			groupString += '%s ' % group
		ldapGroup = 'external_acl_type ldap_group %LOGIN /usr/lib/squid3/squid_ldap_group'
		ldapGroup += ' -h ' + configRegistry['ldap/server/name']
		ldapGroup += ' -p ' + configRegistry.get('ldap/server/port', '7389')
		ldapGroup += ' -B "' + configRegistry['ldap/base'] + '"'
		ldapGroup += ' -b "' + configRegistry['ldap/base'] + '"'
		ldapGroup += ' -D "' + configRegistry['ldap/hostdn'] + '"'
		if configRegistry.is_true('squid/ntlmauth'):
			ldapGroup += ' -S'
		if configRegistry.is_true('squid/krb5auth'):
			ldapGroup += ' -K'
		ldapGroup += ' -s sub'
		ldapGroup += ' -F "(uid=%s)"'
		ldapGroup += ' -W /etc/squid3.secret'
		ldapGroup += ' -f "(&(objectclass=univentionGroup)(uniqueMember=%u)(cn=%g))"'
		print ldapGroup
		print 'acl inetusers external ldap_group %s' % groupString
		print 'http_access deny !inetusers'

	# authorized users only
	print 
	print '# allow authenticated users'
	print "acl AuthorizedUsers proxy_auth REQUIRED"
	print "http_access allow AuthorizedUsers"

else:
	print "# Allow access based on networks"
	
	import ipaddr

	# Create list of source networks. This includes all interfaces as well as
	# additional networks indicated by squid/allowfrom
	# If virus or content scanning is enabled, only access from localhost is allowed

	allowFrom=[]

	if not 'yes' in [ configRegistry.get('squid/virusscan', ''), configRegistry.get('squid/contentscan', '') ]:
		for network in myNetworks:
			allowFrom.append((network, myNetworks[network]))

		addNetworks=configRegistry.get('squid/allowfrom', '')

		if not addNetworks=='':
			for entry in addNetworks.split(" "):
				try:
					network, netmask = entry.split('/')
					allowFrom.append( (network, netmask) )
				except:
					print "# wrong entry in squid/allowfrom: %s " % entry

		count = 0
		for network, netmask in allowFrom:
			netprefix = ipaddr.IPv4Network(network + "/" + netmask).prefixlen
			print 'acl localnet%s src %s/%s' % (count, network, netprefix)
			count+=1

		print 'http_access allow localhost'
		for rulenum in range(0, count):
			print 'http_access allow localnet%s' % rulenum
	else:
		print 'http_access allow localhost'

print "acl purge method PURGE"
print "acl CONNECT method CONNECT"
print ""
print "http_access allow manager localhost"
print "http_access deny manager"
print "http_access allow purge localhost"
print "http_access deny purge"
print "#http_access deny !Safe_ports"
print "#http_access deny CONNECT !SSL_ports"

if configRegistry['squid/allow/localnet'] == 'yes':
	print 'http_access allow localhost'

print ""
print "http_access deny all"
print "http_reply_access allow all"
print "icp_access allow all"
print "coredump_dir /var/spool/squid3"
print ""

if configRegistry.get("squid/redirect") and configRegistry["squid/redirect"] == "squidguard":
	print 'url_rewrite_program /usr/bin/squidGuard -c /etc/squid/squidGuard.conf'

print "forwarded_for off"

if configRegistry['squid/parent/host']:
	print 'cache_peer '+configRegistry['squid/parent/host']+' parent '+configRegistry.get( 'squid/parent/port', '3128' ) +' 0 '+configRegistry.get( 'squid/parent/options', 'default' )

	print 'always_direct allow to_localhost'

	directTo=[]

	for network in myNetworks:
		directTo.append((network, myNetworks[network]))

	directNetworks = configRegistry.get( 'squid/parent/directnetworks', '' )

	if not directNetworks == '':
		for entry in directNetworks.split(" "):
			try:
				directTo.append( ( entry.split('/')[0], entry.split('/')[1] ) )
			except:
				print "# wrong entry in squid/parent/directnetworks: %s " % entry
		
	count = 0
	for network, netmask in directTo:
		print 'acl to_localnet%s dst %s/%s' % (count, network, netmask)
		count+=1
		
	for rulenum in range(0, count):
		print 'always_direct allow to_localnet%s' % rulenum

	print 'never_direct allow all'

try:
	ipauth_ttl = int( configRegistry.get( 'squid/ipauth/ttl', '0' ) )
except:
	ipauth_ttl = 0
if ipauth_ttl:
	print 'authenticate_ip_shortcircuit_ttl %d seconds' % ipauth_ttl

	for right in ( 'deny', 'allow' ):
		i = 0
		ipauth_acls = configRegistry.get( 'squid/ipauth/%s' % right, '' )
		if not ipauth_acls:
			continue
		acl_prefix = 'ipauth_%s_%%d' % right
		for network in ipauth_acls.split( ' ' ):
			acl_name = acl_prefix % i
			i += 1
			print 'acl %s src %s' % ( acl_name, network )
			print 'authenticate_ip_shortcircuit_access %s %s' % ( right, acl_name )

@!@

